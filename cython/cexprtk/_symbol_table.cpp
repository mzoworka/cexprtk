/* Generated by Cython 0.29.33 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "3rdparty/exprtk/exprtk.hpp",
            "cpp/cexprtk.hpp",
            "cpp/cexprtk_custom_functions.hpp",
            "cpp/cexprtk_unknown_symbol_resolver.hpp"
        ],
        "include_dirs": [
            "3rdparty/exprtk",
            "cpp"
        ],
        "language": "c++",
        "name": "cexprtk._symbol_table",
        "sources": [
            "cython/cexprtk/_symbol_table.pyx"
        ]
    },
    "module_name": "cexprtk._symbol_table"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_33"
#define CYTHON_HEX_VERSION 0x001D21F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cexprtk___symbol_table
#define __PYX_HAVE_API__cexprtk___symbol_table
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <vector>
#include <string.h>
#include <string>
#include "exprtk.hpp"
#include <set>
#include "cexprtk_custom_functions.hpp"
#include "cexprtk_unknown_symbol_resolver.hpp"
#include "cexprtk.hpp"
#include <stdio.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cython/cexprtk/_symbol_table.pyx",
  "stringsource",
  "venv/lib/python3.11/site-packages/Cython/Includes/cpython/type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables;
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants;
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions;
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables;
struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table;

/* "exprtk.pxd":6
 * from libcpp cimport bool
 * 
 * ctypedef pair[string,double] LabelFloatPair             # <<<<<<<<<<<<<<
 * ctypedef vector[LabelFloatPair] LabelFloatPairVector
 * 
 */
typedef std::pair<std::string,double>  __pyx_t_6exprtk_LabelFloatPair;

/* "exprtk.pxd":7
 * 
 * ctypedef pair[string,double] LabelFloatPair
 * ctypedef vector[LabelFloatPair] LabelFloatPairVector             # <<<<<<<<<<<<<<
 * 
 * ctypedef pair[string,string] LabelStringPair
 */
typedef std::vector<__pyx_t_6exprtk_LabelFloatPair>  __pyx_t_6exprtk_LabelFloatPairVector;

/* "exprtk.pxd":9
 * ctypedef vector[LabelFloatPair] LabelFloatPairVector
 * 
 * ctypedef pair[string,string] LabelStringPair             # <<<<<<<<<<<<<<
 * ctypedef vector[LabelStringPair] LabelStringPairVector
 * 
 */
typedef std::pair<std::string,std::string>  __pyx_t_6exprtk_LabelStringPair;

/* "exprtk.pxd":10
 * 
 * ctypedef pair[string,string] LabelStringPair
 * ctypedef vector[LabelStringPair] LabelStringPairVector             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "exprtk.hpp" namespace "exprtk::details":
 */
typedef std::vector<__pyx_t_6exprtk_LabelStringPair>  __pyx_t_6exprtk_LabelStringPairVector;

/* "exprtk.pxd":21
 *     T value()
 * 
 * ctypedef variable_node[double] variable_t             # <<<<<<<<<<<<<<
 * ctypedef variable_t * variable_ptr
 * 
 */
typedef exprtk::details::variable_node<double>  __pyx_t_6exprtk_variable_t;

/* "exprtk.pxd":22
 * 
 * ctypedef variable_node[double] variable_t
 * ctypedef variable_t * variable_ptr             # <<<<<<<<<<<<<<
 * 
 * ctypedef stringvar_node[double] stringvar_t
 */
typedef __pyx_t_6exprtk_variable_t *__pyx_t_6exprtk_variable_ptr;

/* "exprtk.pxd":24
 * ctypedef variable_t * variable_ptr
 * 
 * ctypedef stringvar_node[double] stringvar_t             # <<<<<<<<<<<<<<
 * ctypedef stringvar_t* stringvar_ptr
 * 
 */
typedef exprtk::details::stringvar_node<double>  __pyx_t_6exprtk_stringvar_t;

/* "exprtk.pxd":25
 * 
 * ctypedef stringvar_node[double] stringvar_t
 * ctypedef stringvar_t* stringvar_ptr             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "exprtk.hpp" namespace "exprtk":
 */
typedef __pyx_t_6exprtk_stringvar_t *__pyx_t_6exprtk_stringvar_ptr;

/* "exprtk.pxd":99
 *     e_constant_type "exprtk::parser<double>::unknown_symbol_resolver::e_usr_constant_type"
 * 
 * ctypedef symbol_table[double] symbol_table_type             # <<<<<<<<<<<<<<
 * ctypedef expression[double] expression_type
 * ctypedef parser[double] parser_type
 */
typedef exprtk::symbol_table<double>  __pyx_t_6exprtk_symbol_table_type;

/* "exprtk.pxd":100
 * 
 * ctypedef symbol_table[double] symbol_table_type
 * ctypedef expression[double] expression_type             # <<<<<<<<<<<<<<
 * ctypedef parser[double] parser_type
 * ctypedef results_context[double] results_context_type
 */
typedef exprtk::expression<double>  __pyx_t_6exprtk_expression_type;

/* "exprtk.pxd":101
 * ctypedef symbol_table[double] symbol_table_type
 * ctypedef expression[double] expression_type
 * ctypedef parser[double] parser_type             # <<<<<<<<<<<<<<
 * ctypedef results_context[double] results_context_type
 * ctypedef type_store[double] type_store_type
 */
typedef exprtk::parser<double>  __pyx_t_6exprtk_parser_type;

/* "exprtk.pxd":102
 * ctypedef expression[double] expression_type
 * ctypedef parser[double] parser_type
 * ctypedef results_context[double] results_context_type             # <<<<<<<<<<<<<<
 * ctypedef type_store[double] type_store_type
 */
typedef exprtk::results_context<double>  __pyx_t_6exprtk_results_context_type;

/* "exprtk.pxd":103
 * ctypedef parser[double] parser_type
 * ctypedef results_context[double] results_context_type
 * ctypedef type_store[double] type_store_type             # <<<<<<<<<<<<<<
 */
typedef exprtk::type_store<double>  __pyx_t_6exprtk_type_store_type;

/* "cexprtk_custom_functions.pxd":14
 *     void resetException()
 * 
 * ctypedef CustomFunctionBase cfunction_t             # <<<<<<<<<<<<<<
 * ctypedef cfunction_t * cfunction_ptr
 * ctypedef exprtk.ifunction[double] ifunction
 */
typedef CustomFunctionBase __pyx_t_24cexprtk_custom_functions_cfunction_t;

/* "cexprtk_custom_functions.pxd":15
 * 
 * ctypedef CustomFunctionBase cfunction_t
 * ctypedef cfunction_t * cfunction_ptr             # <<<<<<<<<<<<<<
 * ctypedef exprtk.ifunction[double] ifunction
 * ctypedef ifunction * ifunction_ptr
 */
typedef __pyx_t_24cexprtk_custom_functions_cfunction_t *__pyx_t_24cexprtk_custom_functions_cfunction_ptr;

/* "cexprtk_custom_functions.pxd":16
 * ctypedef CustomFunctionBase cfunction_t
 * ctypedef cfunction_t * cfunction_ptr
 * ctypedef exprtk.ifunction[double] ifunction             # <<<<<<<<<<<<<<
 * ctypedef ifunction * ifunction_ptr
 * 
 */
typedef exprtk::ifunction<double>  __pyx_t_24cexprtk_custom_functions_ifunction;

/* "cexprtk_custom_functions.pxd":17
 * ctypedef cfunction_t * cfunction_ptr
 * ctypedef exprtk.ifunction[double] ifunction
 * ctypedef ifunction * ifunction_ptr             # <<<<<<<<<<<<<<
 * 
 * ctypedef exprtk.ivararg_function[double] ivararg_function
 */
typedef __pyx_t_24cexprtk_custom_functions_ifunction *__pyx_t_24cexprtk_custom_functions_ifunction_ptr;

/* "cexprtk_custom_functions.pxd":19
 * ctypedef ifunction * ifunction_ptr
 * 
 * ctypedef exprtk.ivararg_function[double] ivararg_function             # <<<<<<<<<<<<<<
 * ctypedef ivararg_function * ivararg_function_ptr
 */
typedef exprtk::ivararg_function<double>  __pyx_t_24cexprtk_custom_functions_ivararg_function;

/* "cexprtk_custom_functions.pxd":20
 * 
 * ctypedef exprtk.ivararg_function[double] ivararg_function
 * ctypedef ivararg_function * ivararg_function_ptr             # <<<<<<<<<<<<<<
 */
typedef __pyx_t_24cexprtk_custom_functions_ivararg_function *__pyx_t_24cexprtk_custom_functions_ivararg_function_ptr;

/* "cexprtk_unknown_symbol_resolver.pxd":6
 * cimport exprtk
 * 
 * ctypedef (bool (*)(string&, PythonCallableUnknownSymbolResolverReturnTuple&, void*)) PythonCallableCythonFunctionPtr             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cexprtk_unknown_symbol_resolver.hpp":
 */
typedef bool (*__pyx_t_31cexprtk_unknown_symbol_resolver_PythonCallableCythonFunctionPtr)(std::string &, PythonCallableUnknownSymbolResolverReturnTuple &, void *);

/* "cexprtk/_symbol_table.pxd":8
 * #, cfunction_t, ifunction_ptr, CustomFunctionBase
 * 
 * cdef class _Symbol_Table_Variables:             # <<<<<<<<<<<<<<
 *   cdef object __weakref__
 * 
 */
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_vtab;
  PyObject *__weakref__;
  PyObject *_functions;
  __pyx_t_6exprtk_symbol_table_type *_csymtableptr;
};


/* "cexprtk/_symbol_table.pxd":18
 *   cpdef has_key(self, object key)
 * 
 * cdef class _Symbol_Table_Constants:             # <<<<<<<<<<<<<<
 *   cdef object __weakref__
 *   cdef exprtk.symbol_table_type* _csymtableptr
 */
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_vtab;
  PyObject *__weakref__;
  __pyx_t_6exprtk_symbol_table_type *_csymtableptr;
};


/* "cexprtk/_symbol_table.pxd":25
 *   cpdef has_key(self, object key)
 * 
 * cdef class _Symbol_Table_Functions:             # <<<<<<<<<<<<<<
 *   cdef object __weakref__
 * 
 */
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_vtab;
  PyObject *__weakref__;
  __pyx_t_6exprtk_symbol_table_type *_csymtableptr;
  std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr>  *_cfunction_set_ptr;
  PyObject *_reservedFunctions;
};


/* "cexprtk/_symbol_table.pxd":45
 *   cpdef has_key(self, object key)
 * 
 * cdef class _Symbol_Table_String_Variables:             # <<<<<<<<<<<<<<
 *   cdef object __weakref__
 * 
 */
struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_vtab;
  PyObject *__weakref__;
  PyObject *_functions;
  __pyx_t_6exprtk_symbol_table_type *_csymtableptr;
};


/* "cexprtk/_symbol_table.pxd":56
 * 
 * 
 * cdef class Symbol_Table:             # <<<<<<<<<<<<<<
 *   cdef exprtk.symbol_table_type* _csymtableptr
 *   cdef _Symbol_Table_Variables _variables
 */
struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table {
  PyObject_HEAD
  __pyx_t_6exprtk_symbol_table_type *_csymtableptr;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *_variables;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *_constants;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *_functions;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *_string_variables;
};



/* "cexprtk/_symbol_table.pyx":178
 * 
 * 
 * cdef class _Symbol_Table_Variables:             # <<<<<<<<<<<<<<
 *   """Class providing the .variables property for Symbol_Table.
 * 
 */

struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables {
  PyObject *(*items)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *, int __pyx_skip_dispatch);
  PyObject *(*_get_variable_list)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *);
  PyObject *(*has_key)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Variables;


/* "cexprtk/_symbol_table.pyx":267
 * 
 * 
 * cdef class _Symbol_Table_Constants:             # <<<<<<<<<<<<<<
 *   """Class providing the .constants property for Symbol_Table.
 * 
 */

struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants {
  PyObject *(*items)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *, int __pyx_skip_dispatch);
  PyObject *(*_get_variable_list)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *);
  PyObject *(*has_key)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Constants;


/* "cexprtk/_symbol_table.pyx":331
 * 
 * 
 * cdef class _Symbol_Table_Functions:             # <<<<<<<<<<<<<<
 *   """Class providing the .functions property for Symbol_Table.
 * 
 */

struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions {
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr (*_getitem)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, PyObject *);
  void (*_remove_function_from_set)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, __pyx_t_24cexprtk_custom_functions_cfunction_ptr);
  void (*_add_function_to_set)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, __pyx_t_24cexprtk_custom_functions_cfunction_ptr);
  PyObject *(*_wrapFunction)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, PyObject *, PyObject *, PyObject *, int);
  PyObject *(*_resetFunctionExceptions)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *);
  PyObject *(*_checkForException)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *);
  PyObject *(*items)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, int __pyx_skip_dispatch);
  PyObject *(*has_key)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Functions;


/* "cexprtk/_symbol_table.pyx":519
 * 
 * 
 * cdef class _Symbol_Table_String_Variables:             # <<<<<<<<<<<<<<
 *   """Class providing the .string_variables property for Symbol_Table.
 * 
 */

struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables {
  PyObject *(*items)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *, int __pyx_skip_dispatch);
  PyObject *(*_get_variable_list)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *);
  PyObject *(*has_key)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_String_Variables;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables__get_variable_list(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants__get_variable_list(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__getitem(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key); /* proto*/
static void __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__remove_function_from_set(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_fptr); /* proto*/
static void __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__add_function_to_set(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_fptr); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__wrapFunction(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_key, PyObject *__pyx_v_strkey, PyObject *__pyx_v_function, int __pyx_v_numArgs_); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__resetFunctionExceptions(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__checkForException(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables__get_variable_list(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'exprtk' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'cexprtk_custom_functions' */

/* Module declarations from 'cython' */

/* Module declarations from 'cexprtk_unknown_symbol_resolver' */

/* Module declarations from 'cexprtk_util' */

/* Module declarations from 'cexprtk._custom_function_callbacks' */
static CustomFunctionBase *(*__pyx_f_7cexprtk_26_custom_function_callbacks_wrapFunction)(int, std::string &, PyObject *); /*proto*/

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'cexprtk._symbol_table' */
static PyTypeObject *__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Variables = 0;
static PyTypeObject *__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Constants = 0;
static PyTypeObject *__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Functions = 0;
static PyTypeObject *__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_String_Variables = 0;
static PyTypeObject *__pyx_ptype_7cexprtk_13_symbol_table_Symbol_Table = 0;
static bool __pyx_f_7cexprtk_13_symbol_table_is_constant(std::string &, __pyx_t_6exprtk_symbol_table_type *); /*proto*/
static bool __pyx_f_7cexprtk_13_symbol_table_is_variable(std::string &, __pyx_t_6exprtk_symbol_table_type *); /*proto*/
static bool __pyx_f_7cexprtk_13_symbol_table_is_string_variable(std::string &, __pyx_t_6exprtk_symbol_table_type *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____double(std::pair<std::string,double>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair(const std::vector<__pyx_t_6exprtk_LabelFloatPair>  &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(std::pair<std::string,std::string>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair(const std::vector<__pyx_t_6exprtk_LabelStringPair>  &); /*proto*/
#define __Pyx_MODULE_NAME "cexprtk._symbol_table"
extern int __pyx_module_is_main_cexprtk___symbol_table;
int __pyx_module_is_main_cexprtk___symbol_table = 0;

/* Implementation of 'cexprtk._symbol_table' */
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ReferenceError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k__4[] = ",";
static const char __pyx_k__10[] = "'";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_avg[] = "avg";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_cot[] = "cot";
static const char __pyx_k_csc[] = "csc";
static const char __pyx_k_erf[] = "erf";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_mul[] = "mul";
static const char __pyx_k_sec[] = "sec";
static const char __pyx_k_sgn[] = "sgn";
static const char __pyx_k_sin[] = "sin";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tan[] = "tan";
static const char __pyx_k_acos[] = "acos";
static const char __pyx_k_asin[] = "asin";
static const char __pyx_k_atan[] = "atan";
static const char __pyx_k_ceil[] = "ceil";
static const char __pyx_k_cosh[] = "cosh";
static const char __pyx_k_erfc[] = "erfc";
static const char __pyx_k_frac[] = "frac";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_log2[] = "log2";
static const char __pyx_k_logn[] = "logn";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ncdf[] = "ncdf";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_sinc[] = "sinc";
static const char __pyx_k_sinh[] = "sinh";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_swap[] = "swap";
static const char __pyx_k_tanh[] = "tanh";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_acosh[] = "acosh";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_asinh[] = "asinh";
static const char __pyx_k_atan2[] = "atan2";
static const char __pyx_k_atanh[] = "atanh";
static const char __pyx_k_clamp[] = "clamp";
static const char __pyx_k_equal[] = "equal";
static const char __pyx_k_expm1[] = "expm1";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_hypot[] = "hypot";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_log10[] = "log10";
static const char __pyx_k_log1p[] = "log1p";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_trunc[] = "trunc";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_nequal[] = "nequal";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_roundn[] = "roundn";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_deg2rad[] = "deg2rad";
static const char __pyx_k_has_key[] = "has_key";
static const char __pyx_k_rad2deg[] = "rad2deg";
static const char __pyx_k_Function[] = "Function '";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_deg2grad[] = "deg2grad";
static const char __pyx_k_function[] = "function";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_grad2deg[] = "grad2deg";
static const char __pyx_k_iterkeys[] = "iterkeys";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_constants[] = "constants";
static const char __pyx_k_functions[] = "functions";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_variables[] = "variables";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_exceptions[] = "_exceptions";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_with_value[] = " with value: ";
static const char __pyx_k_Symbol_Table[] = "Symbol_Table";
static const char __pyx_k_functionargs[] = "functionargs";
static const char __pyx_k_add_constants[] = "add_constants";
static const char __pyx_k_checkFunction[] = "_checkFunction";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_ReferenceError[] = "ReferenceError";
static const char __pyx_k_functionargs_2[] = "_functionargs";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Unknown_function[] = "Unknown function: ";
static const char __pyx_k_Unknown_variable[] = "Unknown variable: ";
static const char __pyx_k_string_variables[] = "string_variables";
static const char __pyx_k_populateConstants[] = "_populateConstants";
static const char __pyx_k_populateFunctions[] = "_populateFunctions";
static const char __pyx_k_populateVariables[] = "_populateVariables";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NameShadowException[] = "NameShadowException";
static const char __pyx_k_BadVariableException[] = "BadVariableException";
static const char __pyx_k_Symbol_Table_Constants[] = "_Symbol_Table_Constants";
static const char __pyx_k_Symbol_Table_Functions[] = "_Symbol_Table_Functions";
static const char __pyx_k_Symbol_Table_Variables[] = "_Symbol_Table_Variables";
static const char __pyx_k_Unknown_string_variable[] = "Unknown string_variable: ";
static const char __pyx_k_populateStringVariables[] = "_populateStringVariables";
static const char __pyx_k_VariableNameShadowException[] = "VariableNameShadowException";
static const char __pyx_k_was_already_in_symbol_table[] = "' was already in symbol table.";
static const char __pyx_k_Error_creating_constant_named[] = "Error creating constant named: ";
static const char __pyx_k_Error_creating_variable_named[] = "Error creating variable named: ";
static const char __pyx_k_Symbol_Table_String_Variables[] = "_Symbol_Table_String_Variables";
static const char __pyx_k_Only_functions_with_20_or_fewer[] = "Only functions with 20 or fewer arguments are supported at present. Whilst setting function for '";
static const char __pyx_k_ReservedFunctionShadowException[] = "ReservedFunctionShadowException";
static const char __pyx_k_Cannot_set_string_variable_becau[] = "Cannot set string variable because a function already exists with the same name: ";
static const char __pyx_k_Cannot_set_variable_because_a_co[] = "Cannot set variable because a constant already exists with the same name: ";
static const char __pyx_k_Cannot_set_variable_because_a_fu[] = "Cannot set variable because a function already exists with the same name: ";
static const char __pyx_k_Cannot_set_variable_because_a_st[] = "Cannot set variable because a string variable already exists with the same name: ";
static const char __pyx_k_Function_cannot_be_set_because_a[] = "Function cannot be set because a constant shares the same name:";
static const char __pyx_k_Function_has_same_name_as_a_buil[] = "Function has same name as a built-in exprtk function: ";
static const char __pyx_k_Parent_Symbol_Table_no_longer_ex[] = "Parent Symbol_Table no longer exists";
static const char __pyx_k_The_following_constant_names_are[] = "The following constant names are also found in variables, functions or string_variables: %s";
static const char __pyx_k_The_following_function_names_are[] = "The following function names are also found in variables, constants or string_variables: %s";
static const char __pyx_k_The_following_string_variable_na[] = "The following string_variable names are also found in variables, constants or functions: %s";
static const char __pyx_k_The_following_variable_names_are[] = "The following variable names are also found in constants functions or string_variables: %s";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__csymtableptr_cannot_be_con[] = "self._csymtableptr cannot be converted to a Python object for pickling";
static const char __pyx_k_Cannot_set_string_variable_becau_2[] = "Cannot set string variable because a constant already exists with the same name: ";
static const char __pyx_k_Cannot_set_string_variable_becau_3[] = "Cannot set string variable because a variable already exists with the same name: ";
static const char __pyx_k_Function_cannot_be_set_because_a_2[] = "Function cannot be set because a variable shares the same name:";
static const char __pyx_k_Function_cannot_be_set_because_a_3[] = "Function cannot be set because a string variable shares the same name:";
static PyObject *__pyx_n_s_BadVariableException;
static PyObject *__pyx_kp_u_Cannot_set_string_variable_becau;
static PyObject *__pyx_kp_u_Cannot_set_string_variable_becau_2;
static PyObject *__pyx_kp_u_Cannot_set_string_variable_becau_3;
static PyObject *__pyx_kp_u_Cannot_set_variable_because_a_co;
static PyObject *__pyx_kp_u_Cannot_set_variable_because_a_fu;
static PyObject *__pyx_kp_u_Cannot_set_variable_because_a_st;
static PyObject *__pyx_kp_u_Error_creating_constant_named;
static PyObject *__pyx_kp_u_Error_creating_variable_named;
static PyObject *__pyx_kp_u_Function;
static PyObject *__pyx_kp_u_Function_cannot_be_set_because_a;
static PyObject *__pyx_kp_u_Function_cannot_be_set_because_a_2;
static PyObject *__pyx_kp_u_Function_cannot_be_set_because_a_3;
static PyObject *__pyx_kp_u_Function_has_same_name_as_a_buil;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_NameShadowException;
static PyObject *__pyx_kp_u_Only_functions_with_20_or_fewer;
static PyObject *__pyx_kp_u_Parent_Symbol_Table_no_longer_ex;
static PyObject *__pyx_n_s_ReferenceError;
static PyObject *__pyx_n_s_ReservedFunctionShadowException;
static PyObject *__pyx_n_s_Symbol_Table;
static PyObject *__pyx_n_s_Symbol_Table_Constants;
static PyObject *__pyx_n_s_Symbol_Table_Functions;
static PyObject *__pyx_n_s_Symbol_Table_String_Variables;
static PyObject *__pyx_n_s_Symbol_Table_Variables;
static PyObject *__pyx_kp_u_The_following_constant_names_are;
static PyObject *__pyx_kp_u_The_following_function_names_are;
static PyObject *__pyx_kp_u_The_following_string_variable_na;
static PyObject *__pyx_kp_u_The_following_variable_names_are;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Unknown_function;
static PyObject *__pyx_kp_u_Unknown_string_variable;
static PyObject *__pyx_kp_u_Unknown_variable;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VariableNameShadowException;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_n_u_abs;
static PyObject *__pyx_n_u_acos;
static PyObject *__pyx_n_u_acosh;
static PyObject *__pyx_n_s_add_constants;
static PyObject *__pyx_n_u_ascii;
static PyObject *__pyx_n_u_asin;
static PyObject *__pyx_n_u_asinh;
static PyObject *__pyx_n_u_atan;
static PyObject *__pyx_n_u_atan2;
static PyObject *__pyx_n_u_atanh;
static PyObject *__pyx_n_u_avg;
static PyObject *__pyx_n_u_ceil;
static PyObject *__pyx_n_s_checkFunction;
static PyObject *__pyx_n_u_clamp;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_constants;
static PyObject *__pyx_n_u_cos;
static PyObject *__pyx_n_u_cosh;
static PyObject *__pyx_n_u_cot;
static PyObject *__pyx_n_u_csc;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_u_deg2grad;
static PyObject *__pyx_n_u_deg2rad;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_u_equal;
static PyObject *__pyx_n_u_erf;
static PyObject *__pyx_n_u_erfc;
static PyObject *__pyx_n_s_exceptions;
static PyObject *__pyx_n_u_exp;
static PyObject *__pyx_n_u_expm1;
static PyObject *__pyx_n_u_floor;
static PyObject *__pyx_n_u_frac;
static PyObject *__pyx_n_s_function;
static PyObject *__pyx_n_s_functionargs;
static PyObject *__pyx_n_s_functionargs_2;
static PyObject *__pyx_n_s_functions;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_u_grad2deg;
static PyObject *__pyx_n_s_has_key;
static PyObject *__pyx_n_u_hypot;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_iterkeys;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_u_log;
static PyObject *__pyx_n_u_log10;
static PyObject *__pyx_n_u_log1p;
static PyObject *__pyx_n_u_log2;
static PyObject *__pyx_n_u_logn;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_u_max;
static PyObject *__pyx_n_u_min;
static PyObject *__pyx_n_u_mul;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_u_ncdf;
static PyObject *__pyx_n_u_nequal;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_populateConstants;
static PyObject *__pyx_n_s_populateFunctions;
static PyObject *__pyx_n_s_populateStringVariables;
static PyObject *__pyx_n_s_populateVariables;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_u_rad2deg;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_u_root;
static PyObject *__pyx_n_u_round;
static PyObject *__pyx_n_u_roundn;
static PyObject *__pyx_n_u_sec;
static PyObject *__pyx_kp_s_self__csymtableptr_cannot_be_con;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_u_sgn;
static PyObject *__pyx_n_u_sin;
static PyObject *__pyx_n_u_sinc;
static PyObject *__pyx_n_u_sinh;
static PyObject *__pyx_n_u_sqrt;
static PyObject *__pyx_n_s_string_variables;
static PyObject *__pyx_n_u_sum;
static PyObject *__pyx_n_u_swap;
static PyObject *__pyx_n_u_tan;
static PyObject *__pyx_n_u_tanh;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_u_trunc;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_variables;
static PyObject *__pyx_kp_u_was_already_in_symbol_table;
static PyObject *__pyx_kp_u_with_value;
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table___reduce__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_2__cinit__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self); /* proto */
static void __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_4__dealloc__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_6__init__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_variables, PyObject *__pyx_v_constants, PyObject *__pyx_v_add_constants, PyObject *__pyx_v_functions, PyObject *__pyx_v_string_variables); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_8_populateVariables(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_variables); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_10_populateConstants(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_constants, bool __pyx_v_add_constants); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_12_populateFunctions(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_functions); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_14_populateStringVariables(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_string_variables); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9functions___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9variables___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9constants___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_16string_variables___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables___getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_2__setitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_4__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_6__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_8items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_10iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_12iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_14itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_16keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_18values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_20has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_22__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants___getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_2__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_4__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_6items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_8iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_10iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_12itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_14keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_16values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_18has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_20__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions___cinit__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_2__init__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_4_checkFunction(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_function); /* proto */
static void __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_6__dealloc__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_8__getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_10__setitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_f); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_12__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_14__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_16items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_18iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_20iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_22itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_24keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_26values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_28has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_30__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables___getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_2__setitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_4__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_6__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_8items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_10iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_12iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_14itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_16keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_18values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_20has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_22__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Variables(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Constants(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Functions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_String_Variables(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table_Symbol_Table(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_20;
static PyObject *__pyx_k_;
static PyObject *__pyx_k__2;
static PyObject *__pyx_k__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
/* Late includes */

/* "cexprtk/_symbol_table.pyx":29
 * 
 * 
 * cdef bool is_constant(string& strkey, exprtk.symbol_table_type* csymtableptr):             # <<<<<<<<<<<<<<
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)
 *   return vptr != NULL and csymtableptr[0].is_constant_node(strkey)
 */

static bool __pyx_f_7cexprtk_13_symbol_table_is_constant(std::string &__pyx_v_strkey, __pyx_t_6exprtk_symbol_table_type *__pyx_v_csymtableptr) {
  __pyx_t_6exprtk_variable_ptr __pyx_v_vptr;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  __Pyx_RefNannySetupContext("is_constant", 0);

  /* "cexprtk/_symbol_table.pyx":30
 * 
 * cdef bool is_constant(string& strkey, exprtk.symbol_table_type* csymtableptr):
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)             # <<<<<<<<<<<<<<
 *   return vptr != NULL and csymtableptr[0].is_constant_node(strkey)
 * 
 */
  __pyx_v_vptr = (__pyx_v_csymtableptr[0]).get_variable(__pyx_v_strkey);

  /* "cexprtk/_symbol_table.pyx":31
 * cdef bool is_constant(string& strkey, exprtk.symbol_table_type* csymtableptr):
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)
 *   return vptr != NULL and csymtableptr[0].is_constant_node(strkey)             # <<<<<<<<<<<<<<
 * 
 * cdef bool is_variable(string& strkey, exprtk.symbol_table_type* csymtableptr):
 */
  __pyx_t_2 = (__pyx_v_vptr != NULL);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_csymtableptr[0]).is_constant_node(__pyx_v_strkey);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":29
 * 
 * 
 * cdef bool is_constant(string& strkey, exprtk.symbol_table_type* csymtableptr):             # <<<<<<<<<<<<<<
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)
 *   return vptr != NULL and csymtableptr[0].is_constant_node(strkey)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":33
 *   return vptr != NULL and csymtableptr[0].is_constant_node(strkey)
 * 
 * cdef bool is_variable(string& strkey, exprtk.symbol_table_type* csymtableptr):             # <<<<<<<<<<<<<<
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)
 *   return vptr != NULL and not is_constant(strkey, csymtableptr)
 */

static bool __pyx_f_7cexprtk_13_symbol_table_is_variable(std::string &__pyx_v_strkey, __pyx_t_6exprtk_symbol_table_type *__pyx_v_csymtableptr) {
  __pyx_t_6exprtk_variable_ptr __pyx_v_vptr;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("is_variable", 0);

  /* "cexprtk/_symbol_table.pyx":34
 * 
 * cdef bool is_variable(string& strkey, exprtk.symbol_table_type* csymtableptr):
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)             # <<<<<<<<<<<<<<
 *   return vptr != NULL and not is_constant(strkey, csymtableptr)
 * 
 */
  __pyx_v_vptr = (__pyx_v_csymtableptr[0]).get_variable(__pyx_v_strkey);

  /* "cexprtk/_symbol_table.pyx":35
 * cdef bool is_variable(string& strkey, exprtk.symbol_table_type* csymtableptr):
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)
 *   return vptr != NULL and not is_constant(strkey, csymtableptr)             # <<<<<<<<<<<<<<
 * 
 * cdef bool is_string_variable(string& key, exprtk.symbol_table_type* csymtableptr):
 */
  __pyx_t_2 = (__pyx_v_vptr != NULL);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (!(__pyx_f_7cexprtk_13_symbol_table_is_constant(__pyx_v_strkey, __pyx_v_csymtableptr) != 0));
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":33
 *   return vptr != NULL and csymtableptr[0].is_constant_node(strkey)
 * 
 * cdef bool is_variable(string& strkey, exprtk.symbol_table_type* csymtableptr):             # <<<<<<<<<<<<<<
 *   cdef exprtk.variable_ptr vptr = csymtableptr[0].get_variable(strkey)
 *   return vptr != NULL and not is_constant(strkey, csymtableptr)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":37
 *   return vptr != NULL and not is_constant(strkey, csymtableptr)
 * 
 * cdef bool is_string_variable(string& key, exprtk.symbol_table_type* csymtableptr):             # <<<<<<<<<<<<<<
 *   return csymtableptr[0].is_stringvar(key)
 * 
 */

static bool __pyx_f_7cexprtk_13_symbol_table_is_string_variable(std::string &__pyx_v_key, __pyx_t_6exprtk_symbol_table_type *__pyx_v_csymtableptr) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_string_variable", 0);

  /* "cexprtk/_symbol_table.pyx":38
 * 
 * cdef bool is_string_variable(string& key, exprtk.symbol_table_type* csymtableptr):
 *   return csymtableptr[0].is_stringvar(key)             # <<<<<<<<<<<<<<
 * 
 * cdef class Symbol_Table:
 */
  __pyx_r = (__pyx_v_csymtableptr[0]).is_stringvar(__pyx_v_key);
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":37
 *   return vptr != NULL and not is_constant(strkey, csymtableptr)
 * 
 * cdef bool is_string_variable(string& key, exprtk.symbol_table_type* csymtableptr):             # <<<<<<<<<<<<<<
 *   return csymtableptr[0].is_stringvar(key)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":43
 *   """Class for providing variable and constant values to Expression instances."""
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     constants = dict(self.constants)
 *     variables = dict(self.variables)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table___reduce__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table___reduce__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self) {
  PyObject *__pyx_v_constants = NULL;
  PyObject *__pyx_v_variables = NULL;
  PyObject *__pyx_v_functions = NULL;
  PyObject *__pyx_v_string_variables = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "cexprtk/_symbol_table.pyx":44
 * 
 *   def __reduce__(self):
 *     constants = dict(self.constants)             # <<<<<<<<<<<<<<
 *     variables = dict(self.variables)
 *     functions = dict(self.functions)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_constants); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_constants = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":45
 *   def __reduce__(self):
 *     constants = dict(self.constants)
 *     variables = dict(self.variables)             # <<<<<<<<<<<<<<
 *     functions = dict(self.functions)
 *     string_variables = dict(self.string_variables)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_variables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_variables = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":46
 *     constants = dict(self.constants)
 *     variables = dict(self.variables)
 *     functions = dict(self.functions)             # <<<<<<<<<<<<<<
 *     string_variables = dict(self.string_variables)
 *     return (Symbol_Table, (variables, constants, False, functions, string_variables))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_functions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_functions = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":47
 *     variables = dict(self.variables)
 *     functions = dict(self.functions)
 *     string_variables = dict(self.string_variables)             # <<<<<<<<<<<<<<
 *     return (Symbol_Table, (variables, constants, False, functions, string_variables))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_string_variables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_string_variables = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":48
 *     functions = dict(self.functions)
 *     string_variables = dict(self.string_variables)
 *     return (Symbol_Table, (variables, constants, False, functions, string_variables))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_variables);
  __Pyx_GIVEREF(__pyx_v_variables);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_variables);
  __Pyx_INCREF(__pyx_v_constants);
  __Pyx_GIVEREF(__pyx_v_constants);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_constants);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_1, 2, Py_False);
  __Pyx_INCREF(__pyx_v_functions);
  __Pyx_GIVEREF(__pyx_v_functions);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_functions);
  __Pyx_INCREF(__pyx_v_string_variables);
  __Pyx_GIVEREF(__pyx_v_string_variables);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_string_variables);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_7cexprtk_13_symbol_table_Symbol_Table));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_7cexprtk_13_symbol_table_Symbol_Table));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_7cexprtk_13_symbol_table_Symbol_Table));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":43
 *   """Class for providing variable and constant values to Expression instances."""
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     constants = dict(self.constants)
 *     variables = dict(self.variables)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_constants);
  __Pyx_XDECREF(__pyx_v_variables);
  __Pyx_XDECREF(__pyx_v_functions);
  __Pyx_XDECREF(__pyx_v_string_variables);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":50
 *     return (Symbol_Table, (variables, constants, False, functions, string_variables))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._csymtableptr = new exprtk.symbol_table_type()
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_2__cinit__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_2__cinit__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6exprtk_symbol_table_type *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cexprtk/_symbol_table.pyx":51
 * 
 *   def __cinit__(self):
 *     self._csymtableptr = new exprtk.symbol_table_type()             # <<<<<<<<<<<<<<
 * 
 *     # Set up the functions dictionary
 */
  try {
    __pyx_t_1 = new __pyx_t_6exprtk_symbol_table_type();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 51, __pyx_L1_error)
  }
  __pyx_v_self->_csymtableptr = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":54
 * 
 *     # Set up the functions dictionary
 *     self._functions = _Symbol_Table_Functions()             # <<<<<<<<<<<<<<
 *     self._functions._csymtableptr = self._csymtableptr
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Functions)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_functions);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_functions));
  __pyx_v_self->_functions = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":55
 *     # Set up the functions dictionary
 *     self._functions = _Symbol_Table_Functions()
 *     self._functions._csymtableptr = self._csymtableptr             # <<<<<<<<<<<<<<
 * 
 *     # Set up the variables dictionary
 */
  __pyx_t_1 = __pyx_v_self->_csymtableptr;
  __pyx_v_self->_functions->_csymtableptr = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":58
 * 
 *     # Set up the variables dictionary
 *     self._variables = _Symbol_Table_Variables()             # <<<<<<<<<<<<<<
 *     # ... set the internal pointer held by _variables
 *     self._variables._csymtableptr = self._csymtableptr
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Variables)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_variables);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_variables));
  __pyx_v_self->_variables = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":60
 *     self._variables = _Symbol_Table_Variables()
 *     # ... set the internal pointer held by _variables
 *     self._variables._csymtableptr = self._csymtableptr             # <<<<<<<<<<<<<<
 *     self._variables._functions = PyWeakref_NewProxy(self._functions, None)
 *     #self._functions._variables = PyWeakref_NewProxy(self._variables, None)
 */
  __pyx_t_1 = __pyx_v_self->_csymtableptr;
  __pyx_v_self->_variables->_csymtableptr = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":61
 *     # ... set the internal pointer held by _variables
 *     self._variables._csymtableptr = self._csymtableptr
 *     self._variables._functions = PyWeakref_NewProxy(self._functions, None)             # <<<<<<<<<<<<<<
 *     #self._functions._variables = PyWeakref_NewProxy(self._variables, None)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->_functions);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyWeakref_NewProxy(__pyx_t_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_variables->_functions);
  __Pyx_DECREF(__pyx_v_self->_variables->_functions);
  __pyx_v_self->_variables->_functions = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":65
 * 
 *     # Set up the constants dictionary
 *     self._constants = _Symbol_Table_Constants()             # <<<<<<<<<<<<<<
 *     # ... set the internal pointer held by _constants
 *     self._constants._csymtableptr = self._csymtableptr
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Constants)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_constants);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_constants));
  __pyx_v_self->_constants = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":67
 *     self._constants = _Symbol_Table_Constants()
 *     # ... set the internal pointer held by _constants
 *     self._constants._csymtableptr = self._csymtableptr             # <<<<<<<<<<<<<<
 * 
 *     # Set up the string_variables dictionary
 */
  __pyx_t_1 = __pyx_v_self->_csymtableptr;
  __pyx_v_self->_constants->_csymtableptr = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":70
 * 
 *     # Set up the string_variables dictionary
 *     self._string_variables = _Symbol_Table_String_Variables()             # <<<<<<<<<<<<<<
 *     self._string_variables._csymtableptr = self._csymtableptr
 *     self._string_variables._functions = PyWeakref_NewProxy(self._functions, None)
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_String_Variables)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_string_variables);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_string_variables));
  __pyx_v_self->_string_variables = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":71
 *     # Set up the string_variables dictionary
 *     self._string_variables = _Symbol_Table_String_Variables()
 *     self._string_variables._csymtableptr = self._csymtableptr             # <<<<<<<<<<<<<<
 *     self._string_variables._functions = PyWeakref_NewProxy(self._functions, None)
 * 
 */
  __pyx_t_1 = __pyx_v_self->_csymtableptr;
  __pyx_v_self->_string_variables->_csymtableptr = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":72
 *     self._string_variables = _Symbol_Table_String_Variables()
 *     self._string_variables._csymtableptr = self._csymtableptr
 *     self._string_variables._functions = PyWeakref_NewProxy(self._functions, None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->_functions);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = PyWeakref_NewProxy(__pyx_t_3, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_string_variables->_functions);
  __Pyx_DECREF(__pyx_v_self->_string_variables->_functions);
  __pyx_v_self->_string_variables->_functions = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":50
 *     return (Symbol_Table, (variables, constants, False, functions, string_variables))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._csymtableptr = new exprtk.symbol_table_type()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":76
 * 
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._csymtableptr
 *     self._variables._csymtableptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_4__dealloc__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_4__dealloc__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cexprtk/_symbol_table.pyx":77
 * 
 *   def __dealloc__(self):
 *     del self._csymtableptr             # <<<<<<<<<<<<<<
 *     self._variables._csymtableptr = NULL
 *     self._constants._csymtableptr = NULL
 */
  delete __pyx_v_self->_csymtableptr;

  /* "cexprtk/_symbol_table.pyx":78
 *   def __dealloc__(self):
 *     del self._csymtableptr
 *     self._variables._csymtableptr = NULL             # <<<<<<<<<<<<<<
 *     self._constants._csymtableptr = NULL
 *     self._functions._csymtableptr = NULL
 */
  __pyx_v_self->_variables->_csymtableptr = NULL;

  /* "cexprtk/_symbol_table.pyx":79
 *     del self._csymtableptr
 *     self._variables._csymtableptr = NULL
 *     self._constants._csymtableptr = NULL             # <<<<<<<<<<<<<<
 *     self._functions._csymtableptr = NULL
 *     self._string_variables._csymtableptr = NULL
 */
  __pyx_v_self->_constants->_csymtableptr = NULL;

  /* "cexprtk/_symbol_table.pyx":80
 *     self._variables._csymtableptr = NULL
 *     self._constants._csymtableptr = NULL
 *     self._functions._csymtableptr = NULL             # <<<<<<<<<<<<<<
 *     self._string_variables._csymtableptr = NULL
 * 
 */
  __pyx_v_self->_functions->_csymtableptr = NULL;

  /* "cexprtk/_symbol_table.pyx":81
 *     self._constants._csymtableptr = NULL
 *     self._functions._csymtableptr = NULL
 *     self._string_variables._csymtableptr = NULL             # <<<<<<<<<<<<<<
 * 
 *   def __init__(self, variables, constants = {}, add_constants = False, functions = {}, string_variables = {}):
 */
  __pyx_v_self->_string_variables->_csymtableptr = NULL;

  /* "cexprtk/_symbol_table.pyx":76
 * 
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._csymtableptr
 *     self._variables._csymtableptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cexprtk/_symbol_table.pyx":83
 *     self._string_variables._csymtableptr = NULL
 * 
 *   def __init__(self, variables, constants = {}, add_constants = False, functions = {}, string_variables = {}):             # <<<<<<<<<<<<<<
 *     """Instantiate Symbol_Table defining variables and constants for Expression class.
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cexprtk_13_symbol_table_12Symbol_Table_6__init__[] = "Instantiate Symbol_Table defining variables and constants for Expression class.\n\n    :param variables: Mapping between variable name and initial variable value.\n    :type variables: dict\n\n    :param constants: Constant name to value dictionary.\n    :type constants: dict\n    \n    :param add_constants: If True, add the standard constants ``pi``, ``inf``, ``epsilon``\n      to the 'constants' dictionary before populating the ``Symbol_Table``\n    :type add_constants: bool\n\n    :param functions: Dictionary containing custom functions to be made available to expressions. \n      Dictionary keys specify function names and values should be functions.\n    :type functions: dict\n\n    :param string_variables: Dictionary of string variables to be made available in expressions.\n    :type string_variables: dict\n\n    ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7cexprtk_13_symbol_table_12Symbol_Table_6__init__;
#endif
static int __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_variables = 0;
  PyObject *__pyx_v_constants = 0;
  PyObject *__pyx_v_add_constants = 0;
  PyObject *__pyx_v_functions = 0;
  PyObject *__pyx_v_string_variables = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variables,&__pyx_n_s_constants,&__pyx_n_s_add_constants,&__pyx_n_s_functions,&__pyx_n_s_string_variables,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = __pyx_k_;
    values[2] = ((PyObject *)Py_False);
    values[3] = __pyx_k__2;
    values[4] = __pyx_k__3;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_constants);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_add_constants);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_functions);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string_variables);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 83, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variables = values[0];
    __pyx_v_constants = values[1];
    __pyx_v_add_constants = values[2];
    __pyx_v_functions = values[3];
    __pyx_v_string_variables = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 83, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_6__init__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self), __pyx_v_variables, __pyx_v_constants, __pyx_v_add_constants, __pyx_v_functions, __pyx_v_string_variables);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_6__init__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_variables, PyObject *__pyx_v_constants, PyObject *__pyx_v_add_constants, PyObject *__pyx_v_functions, PyObject *__pyx_v_string_variables) {
  PyObject *__pyx_v_shadowed = NULL;
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_7genexpr__pyx_v_s = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_s = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_s = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_s = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cexprtk/_symbol_table.pyx":105
 *     """
 * 
 *     shadowed = (set(functions.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(variables.keys())             # <<<<<<<<<<<<<<
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_functions, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_constants, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Or(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_string_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Or(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_And(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_shadowed = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":106
 * 
 *     shadowed = (set(functions.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(variables.keys())
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following variable names are also found in constants functions or string_variables: %s" % ",".join(msg)
 */
  __pyx_t_5 = (PySet_GET_SIZE(__pyx_v_shadowed) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cexprtk/_symbol_table.pyx":107
 *     shadowed = (set(functions.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(variables.keys())
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]             # <<<<<<<<<<<<<<
 *       msg = "The following variable names are also found in constants functions or string_variables: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_List(__pyx_v_shadowed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 107, __pyx_L6_error)
      if (unlikely(__pyx_t_1 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 107, __pyx_L6_error)
      }
      __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 107, __pyx_L6_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_s, __pyx_t_1);
        __pyx_t_1 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_7genexpr__pyx_v_s))) __PYX_ERR(0, 107, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_s); __pyx_7genexpr__pyx_v_s = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_s); __pyx_7genexpr__pyx_v_s = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_v_msg = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cexprtk/_symbol_table.pyx":108
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following variable names are also found in constants functions or string_variables: %s" % ",".join(msg)             # <<<<<<<<<<<<<<
 *       raise VariableNameShadowException(msg)
 * 
 */
    __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__4, __pyx_v_msg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_The_following_variable_names_are, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cexprtk/_symbol_table.pyx":109
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following variable names are also found in constants functions or string_variables: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)             # <<<<<<<<<<<<<<
 * 
 *     shadowed = (set(variables.keys() | set(functions.keys()) | set(string_variables.keys())) & set(constants.keys()))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_VariableNameShadowException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_msg);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 109, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":106
 * 
 *     shadowed = (set(functions.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(variables.keys())
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following variable names are also found in constants functions or string_variables: %s" % ",".join(msg)
 */
  }

  /* "cexprtk/_symbol_table.pyx":111
 *       raise VariableNameShadowException(msg)
 * 
 *     shadowed = (set(variables.keys() | set(functions.keys()) | set(string_variables.keys())) & set(constants.keys()))             # <<<<<<<<<<<<<<
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_functions, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Or(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_string_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Or(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_constants, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_shadowed, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":112
 * 
 *     shadowed = (set(variables.keys() | set(functions.keys()) | set(string_variables.keys())) & set(constants.keys()))
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following constant names are also found in variables, functions or string_variables: %s" % ",".join(msg)
 */
  __pyx_t_5 = (PySet_GET_SIZE(__pyx_v_shadowed) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cexprtk/_symbol_table.pyx":113
 *     shadowed = (set(variables.keys() | set(functions.keys()) | set(string_variables.keys())) & set(constants.keys()))
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]             # <<<<<<<<<<<<<<
 *       msg = "The following constant names are also found in variables, functions or string_variables: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PySequence_List(__pyx_v_shadowed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = PyList_Sort(__pyx_t_2); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 113, __pyx_L13_error)
      if (unlikely(__pyx_t_2 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 113, __pyx_L13_error)
      }
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 113, __pyx_L13_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_s, __pyx_t_2);
        __pyx_t_2 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_s))) __PYX_ERR(0, 113, __pyx_L13_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_s); __pyx_8genexpr1__pyx_v_s = 0;
      goto __pyx_L16_exit_scope;
      __pyx_L13_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_s); __pyx_8genexpr1__pyx_v_s = 0;
      goto __pyx_L1_error;
      __pyx_L16_exit_scope:;
    } /* exit inner scope */
    __pyx_v_msg = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":114
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following constant names are also found in variables, functions or string_variables: %s" % ",".join(msg)             # <<<<<<<<<<<<<<
 *       raise VariableNameShadowException(msg)
 * 
 */
    __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__4, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_The_following_constant_names_are, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cexprtk/_symbol_table.pyx":115
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following constant names are also found in variables, functions or string_variables: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)             # <<<<<<<<<<<<<<
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(functions.keys())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_VariableNameShadowException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_msg);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 115, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":112
 * 
 *     shadowed = (set(variables.keys() | set(functions.keys()) | set(string_variables.keys())) & set(constants.keys()))
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following constant names are also found in variables, functions or string_variables: %s" % ",".join(msg)
 */
  }

  /* "cexprtk/_symbol_table.pyx":117
 *       raise VariableNameShadowException(msg)
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(functions.keys())             # <<<<<<<<<<<<<<
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_constants, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Or(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_string_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Or(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_functions, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_shadowed, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":118
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(functions.keys())
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following function names are also found in variables, constants or string_variables: %s" % ",".join(msg)
 */
  __pyx_t_5 = (PySet_GET_SIZE(__pyx_v_shadowed) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cexprtk/_symbol_table.pyx":119
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(functions.keys())
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]             # <<<<<<<<<<<<<<
 *       msg = "The following function names are also found in variables, constants or string_variables: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PySequence_List(__pyx_v_shadowed); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_6 = PyList_Sort(__pyx_t_3); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 119, __pyx_L20_error)
      if (unlikely(__pyx_t_3 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 119, __pyx_L20_error)
      }
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 119, __pyx_L20_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_s, __pyx_t_3);
        __pyx_t_3 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr2__pyx_v_s))) __PYX_ERR(0, 119, __pyx_L20_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_s); __pyx_8genexpr2__pyx_v_s = 0;
      goto __pyx_L23_exit_scope;
      __pyx_L20_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_s); __pyx_8genexpr2__pyx_v_s = 0;
      goto __pyx_L1_error;
      __pyx_L23_exit_scope:;
    } /* exit inner scope */
    __pyx_v_msg = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":120
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following function names are also found in variables, constants or string_variables: %s" % ",".join(msg)             # <<<<<<<<<<<<<<
 *       raise VariableNameShadowException(msg)
 * 
 */
    __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__4, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_The_following_function_names_are, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "cexprtk/_symbol_table.pyx":121
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following function names are also found in variables, constants or string_variables: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)             # <<<<<<<<<<<<<<
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(functions.keys())) & set(string_variables.keys())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_VariableNameShadowException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_msg);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 121, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":118
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(string_variables.keys())) & set(functions.keys())
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following function names are also found in variables, constants or string_variables: %s" % ",".join(msg)
 */
  }

  /* "cexprtk/_symbol_table.pyx":123
 *       raise VariableNameShadowException(msg)
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(functions.keys())) & set(string_variables.keys())             # <<<<<<<<<<<<<<
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_constants, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Or(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_functions, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Or(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_string_variables, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_shadowed, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":124
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(functions.keys())) & set(string_variables.keys())
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following string_variable names are also found in variables, constants or functions: %s" % ",".join(msg)
 */
  __pyx_t_5 = (PySet_GET_SIZE(__pyx_v_shadowed) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cexprtk/_symbol_table.pyx":125
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(functions.keys())) & set(string_variables.keys())
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]             # <<<<<<<<<<<<<<
 *       msg = "The following string_variable names are also found in variables, constants or functions: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L27_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PySequence_List(__pyx_v_shadowed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L27_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = PyList_Sort(__pyx_t_2); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 125, __pyx_L27_error)
      if (unlikely(__pyx_t_2 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 125, __pyx_L27_error)
      }
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 125, __pyx_L27_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_s, __pyx_t_2);
        __pyx_t_2 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr3__pyx_v_s))) __PYX_ERR(0, 125, __pyx_L27_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_s); __pyx_8genexpr3__pyx_v_s = 0;
      goto __pyx_L30_exit_scope;
      __pyx_L27_error:;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_s); __pyx_8genexpr3__pyx_v_s = 0;
      goto __pyx_L1_error;
      __pyx_L30_exit_scope:;
    } /* exit inner scope */
    __pyx_v_msg = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":126
 *     if shadowed:
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following string_variable names are also found in variables, constants or functions: %s" % ",".join(msg)             # <<<<<<<<<<<<<<
 *       raise VariableNameShadowException(msg)
 * 
 */
    __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__4, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_The_following_string_variable_na, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cexprtk/_symbol_table.pyx":127
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following string_variable names are also found in variables, constants or functions: %s" % ",".join(msg)
 *       raise VariableNameShadowException(msg)             # <<<<<<<<<<<<<<
 * 
 *     self._populateVariables(variables)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_VariableNameShadowException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_msg);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 127, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":124
 * 
 *     shadowed = (set(variables.keys()) | set(constants.keys()) | set(functions.keys())) & set(string_variables.keys())
 *     if shadowed:             # <<<<<<<<<<<<<<
 *       msg = [s for s in sorted(shadowed)]
 *       msg = "The following string_variable names are also found in variables, constants or functions: %s" % ",".join(msg)
 */
  }

  /* "cexprtk/_symbol_table.pyx":129
 *       raise VariableNameShadowException(msg)
 * 
 *     self._populateVariables(variables)             # <<<<<<<<<<<<<<
 *     self._populateConstants(constants, add_constants)
 *     self._populateFunctions(functions)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_populateVariables); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_variables) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_variables);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":130
 * 
 *     self._populateVariables(variables)
 *     self._populateConstants(constants, add_constants)             # <<<<<<<<<<<<<<
 *     self._populateFunctions(functions)
 *     self._populateStringVariables(string_variables)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_populateConstants); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_constants, __pyx_v_add_constants};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_constants, __pyx_v_add_constants};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_constants);
    __Pyx_GIVEREF(__pyx_v_constants);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_constants);
    __Pyx_INCREF(__pyx_v_add_constants);
    __Pyx_GIVEREF(__pyx_v_add_constants);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_add_constants);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":131
 *     self._populateVariables(variables)
 *     self._populateConstants(constants, add_constants)
 *     self._populateFunctions(functions)             # <<<<<<<<<<<<<<
 *     self._populateStringVariables(string_variables)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_populateFunctions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_functions) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_functions);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":132
 *     self._populateConstants(constants, add_constants)
 *     self._populateFunctions(functions)
 *     self._populateStringVariables(string_variables)             # <<<<<<<<<<<<<<
 * 
 *   def _populateVariables(self,object variables):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_populateStringVariables); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_string_variables) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_string_variables);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":83
 *     self._string_variables._csymtableptr = NULL
 * 
 *   def __init__(self, variables, constants = {}, add_constants = False, functions = {}, string_variables = {}):             # <<<<<<<<<<<<<<
 *     """Instantiate Symbol_Table defining variables and constants for Expression class.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_shadowed);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_s);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_s);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_s);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":134
 *     self._populateStringVariables(string_variables)
 * 
 *   def _populateVariables(self,object variables):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr
 *     for s, v in variables.iteritems():
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9_populateVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_variables); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9_populateVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_variables) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_populateVariables (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_8_populateVariables(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self), ((PyObject *)__pyx_v_variables));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_8_populateVariables(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_variables) {
  PyObject *__pyx_v_cstr = 0;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  std::string __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_populateVariables", 0);

  /* "cexprtk/_symbol_table.pyx":136
 *   def _populateVariables(self,object variables):
 *     cdef bytes cstr
 *     for s, v in variables.iteritems():             # <<<<<<<<<<<<<<
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].create_variable(cstr,v):
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_variables == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_variables, 0, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cexprtk/_symbol_table.pyx":137
 *     cdef bytes cstr
 *     for s, v in variables.iteritems():
 *       cstr = s.encode("ascii")             # <<<<<<<<<<<<<<
 *       if not self._csymtableptr[0].create_variable(cstr,v):
 *         raise BadVariableException("Error creating variable named: %s with value: %s" % (s,v))
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_u_ascii);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_cstr, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "cexprtk/_symbol_table.pyx":138
 *     for s, v in variables.iteritems():
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].create_variable(cstr,v):             # <<<<<<<<<<<<<<
 *         raise BadVariableException("Error creating variable named: %s with value: %s" % (s,v))
 * 
 */
    __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
    __pyx_t_11 = ((!((__pyx_v_self->_csymtableptr[0]).create_variable(__pyx_t_9, __pyx_t_10) != 0)) != 0);
    if (unlikely(__pyx_t_11)) {

      /* "cexprtk/_symbol_table.pyx":139
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].create_variable(cstr,v):
 *         raise BadVariableException("Error creating variable named: %s with value: %s" % (s,v))             # <<<<<<<<<<<<<<
 * 
 *   def _populateConstants(self, object constants, bool add_constants):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_BadVariableException); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Error_creating_variable_named);
      __pyx_t_12 += 31;
      __Pyx_GIVEREF(__pyx_kp_u_Error_creating_variable_named);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Error_creating_variable_named);
      __pyx_t_14 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_s), __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u_with_value);
      __pyx_t_12 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_with_value);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_with_value);
      __pyx_t_14 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_v), __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_14);
      __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_8, 4, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 139, __pyx_L1_error)

      /* "cexprtk/_symbol_table.pyx":138
 *     for s, v in variables.iteritems():
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].create_variable(cstr,v):             # <<<<<<<<<<<<<<
 *         raise BadVariableException("Error creating variable named: %s with value: %s" % (s,v))
 * 
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":134
 *     self._populateStringVariables(string_variables)
 * 
 *   def _populateVariables(self,object variables):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr
 *     for s, v in variables.iteritems():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table._populateVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":141
 *         raise BadVariableException("Error creating variable named: %s with value: %s" % (s,v))
 * 
 *   def _populateConstants(self, object constants, bool add_constants):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr
 *     if add_constants:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_11_populateConstants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_11_populateConstants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_constants = 0;
  bool __pyx_v_add_constants;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_populateConstants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_constants,&__pyx_n_s_add_constants,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_constants)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_add_constants)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_populateConstants", 1, 2, 2, 1); __PYX_ERR(0, 141, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_populateConstants") < 0)) __PYX_ERR(0, 141, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_constants = values[0];
    __pyx_v_add_constants = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_add_constants == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_populateConstants", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 141, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table._populateConstants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_10_populateConstants(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self), __pyx_v_constants, __pyx_v_add_constants);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_10_populateConstants(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_constants, bool __pyx_v_add_constants) {
  PyObject *__pyx_v_cstr = 0;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  double __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_populateConstants", 0);

  /* "cexprtk/_symbol_table.pyx":143
 *   def _populateConstants(self, object constants, bool add_constants):
 *     cdef bytes cstr
 *     if add_constants:             # <<<<<<<<<<<<<<
 *       self._csymtableptr[0].add_constants()
 * 
 */
  __pyx_t_1 = (__pyx_v_add_constants != 0);
  if (__pyx_t_1) {

    /* "cexprtk/_symbol_table.pyx":144
 *     cdef bytes cstr
 *     if add_constants:
 *       self._csymtableptr[0].add_constants()             # <<<<<<<<<<<<<<
 * 
 *     for s,v in constants.iteritems():
 */
    (void)((__pyx_v_self->_csymtableptr[0]).add_constants());

    /* "cexprtk/_symbol_table.pyx":143
 *   def _populateConstants(self, object constants, bool add_constants):
 *     cdef bytes cstr
 *     if add_constants:             # <<<<<<<<<<<<<<
 *       self._csymtableptr[0].add_constants()
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":146
 *       self._csymtableptr[0].add_constants()
 * 
 *     for s,v in constants.iteritems():             # <<<<<<<<<<<<<<
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].add_constant(cstr,v):
 */
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_constants == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_constants, 0, __pyx_n_s_iteritems, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, &__pyx_t_7, NULL, __pyx_t_5);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "cexprtk/_symbol_table.pyx":147
 * 
 *     for s,v in constants.iteritems():
 *       cstr = s.encode("ascii")             # <<<<<<<<<<<<<<
 *       if not self._csymtableptr[0].add_constant(cstr,v):
 *         raise BadVariableException("Error creating constant named: %s with value: %s" % (s,v))
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_n_u_ascii);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_cstr, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "cexprtk/_symbol_table.pyx":148
 *     for s,v in constants.iteritems():
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].add_constant(cstr,v):             # <<<<<<<<<<<<<<
 *         raise BadVariableException("Error creating constant named: %s with value: %s" % (s,v))
 * 
 */
    __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
    __pyx_t_1 = ((!((__pyx_v_self->_csymtableptr[0]).add_constant(__pyx_t_10, __pyx_t_11) != 0)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "cexprtk/_symbol_table.pyx":149
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].add_constant(cstr,v):
 *         raise BadVariableException("Error creating constant named: %s with value: %s" % (s,v))             # <<<<<<<<<<<<<<
 * 
 *   def _populateFunctions(self, object functions):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BadVariableException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Error_creating_constant_named);
      __pyx_t_12 += 31;
      __Pyx_GIVEREF(__pyx_kp_u_Error_creating_constant_named);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_Error_creating_constant_named);
      __pyx_t_14 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_s), __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u_with_value);
      __pyx_t_12 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_with_value);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_with_value);
      __pyx_t_14 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_v), __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_14);
      __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_9, 4, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 149, __pyx_L1_error)

      /* "cexprtk/_symbol_table.pyx":148
 *     for s,v in constants.iteritems():
 *       cstr = s.encode("ascii")
 *       if not self._csymtableptr[0].add_constant(cstr,v):             # <<<<<<<<<<<<<<
 *         raise BadVariableException("Error creating constant named: %s with value: %s" % (s,v))
 * 
 */
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":141
 *         raise BadVariableException("Error creating variable named: %s with value: %s" % (s,v))
 * 
 *   def _populateConstants(self, object constants, bool add_constants):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr
 *     if add_constants:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table._populateConstants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":151
 *         raise BadVariableException("Error creating constant named: %s with value: %s" % (s,v))
 * 
 *   def _populateFunctions(self, object functions):             # <<<<<<<<<<<<<<
 *     for k,v in functions.items():
 *       self.functions[k] = v
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_13_populateFunctions(PyObject *__pyx_v_self, PyObject *__pyx_v_functions); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_13_populateFunctions(PyObject *__pyx_v_self, PyObject *__pyx_v_functions) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_populateFunctions (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_12_populateFunctions(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self), ((PyObject *)__pyx_v_functions));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_12_populateFunctions(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_functions) {
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_populateFunctions", 0);

  /* "cexprtk/_symbol_table.pyx":152
 * 
 *   def _populateFunctions(self, object functions):
 *     for k,v in functions.items():             # <<<<<<<<<<<<<<
 *       self.functions[k] = v
 * 
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_functions == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 152, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_functions, 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cexprtk/_symbol_table.pyx":153
 *   def _populateFunctions(self, object functions):
 *     for k,v in functions.items():
 *       self.functions[k] = v             # <<<<<<<<<<<<<<
 * 
 *   def _populateStringVariables(self, object string_variables):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_functions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_v_k, __pyx_v_v) < 0)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":151
 *         raise BadVariableException("Error creating constant named: %s with value: %s" % (s,v))
 * 
 *   def _populateFunctions(self, object functions):             # <<<<<<<<<<<<<<
 *     for k,v in functions.items():
 *       self.functions[k] = v
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table._populateFunctions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":155
 *       self.functions[k] = v
 * 
 *   def _populateStringVariables(self, object string_variables):             # <<<<<<<<<<<<<<
 *     for k,v in string_variables.items():
 *       self.string_variables[k] = v
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_15_populateStringVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_string_variables); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_15_populateStringVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_string_variables) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_populateStringVariables (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_14_populateStringVariables(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self), ((PyObject *)__pyx_v_string_variables));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_14_populateStringVariables(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self, PyObject *__pyx_v_string_variables) {
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_populateStringVariables", 0);

  /* "cexprtk/_symbol_table.pyx":156
 * 
 *   def _populateStringVariables(self, object string_variables):
 *     for k,v in string_variables.items():             # <<<<<<<<<<<<<<
 *       self.string_variables[k] = v
 * 
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_string_variables == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 156, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_string_variables, 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cexprtk/_symbol_table.pyx":157
 *   def _populateStringVariables(self, object string_variables):
 *     for k,v in string_variables.items():
 *       self.string_variables[k] = v             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_string_variables); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_v_k, __pyx_v_v) < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":155
 *       self.functions[k] = v
 * 
 *   def _populateStringVariables(self, object string_variables):             # <<<<<<<<<<<<<<
 *     for k,v in string_variables.items():
 *       self.string_variables[k] = v
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table._populateStringVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":161
 * 
 *   property functions:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._functions, None)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9functions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9functions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9functions___get__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9functions___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cexprtk/_symbol_table.pyx":162
 *   property functions:
 *     def __get__(self):
 *       return PyWeakref_NewProxy(self._functions, None)             # <<<<<<<<<<<<<<
 * 
 *   property variables:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->_functions);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyWeakref_NewProxy(__pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":161
 * 
 *   property functions:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._functions, None)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.functions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":165
 * 
 *   property variables:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._variables, None)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9variables_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9variables_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9variables___get__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9variables___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cexprtk/_symbol_table.pyx":166
 *   property variables:
 *     def __get__(self):
 *       return PyWeakref_NewProxy(self._variables, None)             # <<<<<<<<<<<<<<
 * 
 *   property constants:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->_variables);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyWeakref_NewProxy(__pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":165
 * 
 *   property variables:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._variables, None)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.variables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":169
 * 
 *   property constants:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._constants, None)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9constants_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9constants_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9constants___get__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_9constants___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cexprtk/_symbol_table.pyx":170
 *   property constants:
 *     def __get__(self):
 *       return PyWeakref_NewProxy(self._constants, None)             # <<<<<<<<<<<<<<
 * 
 *   property string_variables:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->_constants);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyWeakref_NewProxy(__pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":169
 * 
 *   property constants:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._constants, None)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.constants.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":173
 * 
 *   property string_variables:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._string_variables, None)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_16string_variables_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_16string_variables_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_16string_variables___get__(((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_12Symbol_Table_16string_variables___get__(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cexprtk/_symbol_table.pyx":174
 *   property string_variables:
 *     def __get__(self):
 *       return PyWeakref_NewProxy(self._string_variables, None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->_string_variables);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyWeakref_NewProxy(__pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":173
 * 
 *   property string_variables:
 *     def __get__(self):             # <<<<<<<<<<<<<<
 *       return PyWeakref_NewProxy(self._string_variables, None)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table.Symbol_Table.string_variables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":184
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables___getitem__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables___getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_cstr_key = 0;
  __pyx_t_6exprtk_symbol_table_type *__pyx_v_st;
  __pyx_t_6exprtk_variable_ptr __pyx_v_vptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_6exprtk_symbol_table_type *__pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "cexprtk/_symbol_table.pyx":185
 * 
 *   def __getitem__(self, object key):
 *     cdef bytes cstr_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(cstr_key)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_v_cstr_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":186
 *   def __getitem__(self, object key):
 *     cdef bytes cstr_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr             # <<<<<<<<<<<<<<
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(cstr_key)
 *     if vptr != NULL and not st[0].is_constant_node(cstr_key):
 */
  __pyx_t_4 = __pyx_v_self->_csymtableptr;
  __pyx_v_st = __pyx_t_4;

  /* "cexprtk/_symbol_table.pyx":187
 *     cdef bytes cstr_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(cstr_key)             # <<<<<<<<<<<<<<
 *     if vptr != NULL and not st[0].is_constant_node(cstr_key):
 *       return vptr[0].value()
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_v_vptr = (__pyx_v_st[0]).get_variable(__pyx_t_5);

  /* "cexprtk/_symbol_table.pyx":188
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(cstr_key)
 *     if vptr != NULL and not st[0].is_constant_node(cstr_key):             # <<<<<<<<<<<<<<
 *       return vptr[0].value()
 *     else:
 */
  __pyx_t_7 = ((__pyx_v_vptr != NULL) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_t_7 = ((!((__pyx_v_st[0]).is_constant_node(__pyx_t_5) != 0)) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":189
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(cstr_key)
 *     if vptr != NULL and not st[0].is_constant_node(cstr_key):
 *       return vptr[0].value()             # <<<<<<<<<<<<<<
 *     else:
 *       raise KeyError("Unknown variable: "+key)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_vptr[0]).value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cexprtk/_symbol_table.pyx":188
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(cstr_key)
 *     if vptr != NULL and not st[0].is_constant_node(cstr_key):             # <<<<<<<<<<<<<<
 *       return vptr[0].value()
 *     else:
 */
  }

  /* "cexprtk/_symbol_table.pyx":191
 *       return vptr[0].value()
 *     else:
 *       raise KeyError("Unknown variable: "+key)             # <<<<<<<<<<<<<<
 * 
 *   def __setitem__(self, object key, double value):
 */
  /*else*/ {
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Unknown_variable, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 191, __pyx_L1_error)
  }

  /* "cexprtk/_symbol_table.pyx":184
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":193
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __setitem__(self, object key, double value):             # <<<<<<<<<<<<<<
 *     cdef int rv
 *     cdef string strkey
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_3__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_3__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_2__setitem__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_2__setitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key, double __pyx_v_value) {
  int __pyx_v_rv;
  std::string __pyx_v_strkey;
  __pyx_t_6exprtk_variable_ptr __pyx_v_vptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "cexprtk/_symbol_table.pyx":196
 *     cdef int rv
 *     cdef string strkey
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")
 */
  __pyx_t_1 = ((!(__pyx_v_self->_csymtableptr != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":197
 *     cdef string strkey
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")             # <<<<<<<<<<<<<<
 *     strkey = key.encode("ascii")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ReferenceError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 197, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":196
 *     cdef int rv
 *     cdef string strkey
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")
 */
  }

  /* "cexprtk/_symbol_table.pyx":198
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")             # <<<<<<<<<<<<<<
 * 
 *     if self._functions.has_key(key):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_strkey = __pyx_t_5;

  /* "cexprtk/_symbol_table.pyx":200
 *     strkey = key.encode("ascii")
 * 
 *     if self._functions.has_key(key):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set variable because a function already exists with the same name: "+key)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_functions, __pyx_n_s_has_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":201
 * 
 *     if self._functions.has_key(key):
 *       raise KeyError("Cannot set variable because a function already exists with the same name: "+key)             # <<<<<<<<<<<<<<
 * 
 *     if is_constant(strkey, self._csymtableptr):
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_Cannot_set_variable_because_a_fu, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 201, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":200
 *     strkey = key.encode("ascii")
 * 
 *     if self._functions.has_key(key):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set variable because a function already exists with the same name: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":203
 *       raise KeyError("Cannot set variable because a function already exists with the same name: "+key)
 * 
 *     if is_constant(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set variable because a constant already exists with the same name: "+key)
 * 
 */
  __pyx_t_1 = (__pyx_f_7cexprtk_13_symbol_table_is_constant(__pyx_v_strkey, __pyx_v_self->_csymtableptr) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":204
 * 
 *     if is_constant(strkey, self._csymtableptr):
 *       raise KeyError("Cannot set variable because a constant already exists with the same name: "+key)             # <<<<<<<<<<<<<<
 * 
 *     if is_string_variable(strkey, self._csymtableptr):
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_u_Cannot_set_variable_because_a_co, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 204, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":203
 *       raise KeyError("Cannot set variable because a function already exists with the same name: "+key)
 * 
 *     if is_constant(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set variable because a constant already exists with the same name: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":206
 *       raise KeyError("Cannot set variable because a constant already exists with the same name: "+key)
 * 
 *     if is_string_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set variable because a string variable already exists with the same name: "+key)
 * 
 */
  __pyx_t_1 = (__pyx_f_7cexprtk_13_symbol_table_is_string_variable(__pyx_v_strkey, __pyx_v_self->_csymtableptr) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":207
 * 
 *     if is_string_variable(strkey, self._csymtableptr):
 *       raise KeyError("Cannot set variable because a string variable already exists with the same name: "+key)             # <<<<<<<<<<<<<<
 * 
 *     cdef exprtk.variable_ptr vptr = self._csymtableptr[0].get_variable(strkey)
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_Cannot_set_variable_because_a_st, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 207, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":206
 *       raise KeyError("Cannot set variable because a constant already exists with the same name: "+key)
 * 
 *     if is_string_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set variable because a string variable already exists with the same name: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":209
 *       raise KeyError("Cannot set variable because a string variable already exists with the same name: "+key)
 * 
 *     cdef exprtk.variable_ptr vptr = self._csymtableptr[0].get_variable(strkey)             # <<<<<<<<<<<<<<
 *     if vptr == NULL:
 *       rv = self._csymtableptr[0].create_variable(strkey, value)
 */
  __pyx_v_vptr = (__pyx_v_self->_csymtableptr[0]).get_variable(__pyx_v_strkey);

  /* "cexprtk/_symbol_table.pyx":210
 * 
 *     cdef exprtk.variable_ptr vptr = self._csymtableptr[0].get_variable(strkey)
 *     if vptr == NULL:             # <<<<<<<<<<<<<<
 *       rv = self._csymtableptr[0].create_variable(strkey, value)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_vptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "cexprtk/_symbol_table.pyx":211
 *     cdef exprtk.variable_ptr vptr = self._csymtableptr[0].get_variable(strkey)
 *     if vptr == NULL:
 *       rv = self._csymtableptr[0].create_variable(strkey, value)             # <<<<<<<<<<<<<<
 *     else:
 *       rv = cexprtk_util.variableAssign(self._csymtableptr[0], strkey, value)
 */
    __pyx_v_rv = (__pyx_v_self->_csymtableptr[0]).create_variable(__pyx_v_strkey, __pyx_v_value);

    /* "cexprtk/_symbol_table.pyx":210
 * 
 *     cdef exprtk.variable_ptr vptr = self._csymtableptr[0].get_variable(strkey)
 *     if vptr == NULL:             # <<<<<<<<<<<<<<
 *       rv = self._csymtableptr[0].create_variable(strkey, value)
 *     else:
 */
    goto __pyx_L7;
  }

  /* "cexprtk/_symbol_table.pyx":213
 *       rv = self._csymtableptr[0].create_variable(strkey, value)
 *     else:
 *       rv = cexprtk_util.variableAssign(self._csymtableptr[0], strkey, value)             # <<<<<<<<<<<<<<
 * 
 *     if not rv:
 */
  /*else*/ {
    __pyx_v_rv = variableAssign((__pyx_v_self->_csymtableptr[0]), __pyx_v_strkey, __pyx_v_value);
  }
  __pyx_L7:;

  /* "cexprtk/_symbol_table.pyx":215
 *       rv = cexprtk_util.variableAssign(self._csymtableptr[0], strkey, value)
 * 
 *     if not rv:             # <<<<<<<<<<<<<<
 *       raise KeyError("Unknown variable: "+key)
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_rv != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":216
 * 
 *     if not rv:
 *       raise KeyError("Unknown variable: "+key)             # <<<<<<<<<<<<<<
 * 
 *   def __iter__(self):
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_u_Unknown_variable, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 216, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":215
 *       rv = cexprtk_util.variableAssign(self._csymtableptr[0], strkey, value)
 * 
 *     if not rv:             # <<<<<<<<<<<<<<
 *       raise KeyError("Unknown variable: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":193
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __setitem__(self, object key, double value):             # <<<<<<<<<<<<<<
 *     cdef int rv
 *     cdef string strkey
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":218
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_4__iter__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_4__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "cexprtk/_symbol_table.pyx":219
 * 
 *   def __iter__(self):
 *     return self.iterkeys()             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":218
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":221
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return len(self.items())
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_6__len__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_6__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "cexprtk/_symbol_table.pyx":222
 * 
 *   def __len__(self):
 *     return len(self.items())             # <<<<<<<<<<<<<<
 * 
 *   cpdef list items(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 222, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":221
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return len(self.items())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":224
 *     return len(self.items())
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     cdef object strk
 *     cdef list retlist = []
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_strk = 0;
  PyObject *__pyx_v_retlist = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  std::string __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_9items)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 224, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":226
 *   cpdef list items(self):
 *     cdef object strk
 *     cdef list retlist = []             # <<<<<<<<<<<<<<
 * 
 *     for (k,v) in self._get_variable_list():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retlist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":228
 *     cdef list retlist = []
 * 
 *     for (k,v) in self._get_variable_list():             # <<<<<<<<<<<<<<
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self->__pyx_vtab)->_get_variable_list(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 228, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 228, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 228, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 228, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cexprtk/_symbol_table.pyx":229
 * 
 *     for (k,v) in self._get_variable_list():
 *       if not self._csymtableptr.is_constant_node(k):             # <<<<<<<<<<<<<<
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))
 */
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_k); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L1_error)
    __pyx_t_9 = ((!(__pyx_v_self->_csymtableptr->is_constant_node(__pyx_t_8) != 0)) != 0);
    if (__pyx_t_9) {

      /* "cexprtk/_symbol_table.pyx":230
 *     for (k,v) in self._get_variable_list():
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")             # <<<<<<<<<<<<<<
 *         retlist.append((strk, v))
 *     return retlist
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_k, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_ascii);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_strk, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":231
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))             # <<<<<<<<<<<<<<
 *     return retlist
 * 
 */
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_strk);
      __Pyx_GIVEREF(__pyx_v_strk);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_strk);
      __Pyx_INCREF(__pyx_v_v);
      __Pyx_GIVEREF(__pyx_v_v);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_v);
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_retlist, __pyx_t_1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":229
 * 
 *     for (k,v) in self._get_variable_list():
 *       if not self._csymtableptr.is_constant_node(k):             # <<<<<<<<<<<<<<
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))
 */
    }

    /* "cexprtk/_symbol_table.pyx":228
 *     cdef list retlist = []
 * 
 *     for (k,v) in self._get_variable_list():             # <<<<<<<<<<<<<<
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":232
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))
 *     return retlist             # <<<<<<<<<<<<<<
 * 
 *   def iteritems(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retlist);
  __pyx_r = __pyx_v_retlist;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":224
 *     return len(self.items())
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     cdef object strk
 *     cdef list retlist = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strk);
  __Pyx_XDECREF(__pyx_v_retlist);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_8items(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_8items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_items(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":234
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_11iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_11iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iteritems (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_10iteritems(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_10iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iteritems", 0);

  /* "cexprtk/_symbol_table.pyx":235
 * 
 *   def iteritems(self):
 *     return iter(self.items())             # <<<<<<<<<<<<<<
 * 
 *   def iterkeys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":234
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.iteritems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":237
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_13iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_13iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterkeys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_12iterkeys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_12iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterkeys", 0);

  /* "cexprtk/_symbol_table.pyx":238
 * 
 *   def iterkeys(self):
 *     return iter(self.keys())             # <<<<<<<<<<<<<<
 * 
 *   def itervalues(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":237
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.iterkeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":240
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_15itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_15itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervalues (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_14itervalues(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_14itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("itervalues", 0);

  /* "cexprtk/_symbol_table.pyx":241
 * 
 *   def itervalues(self):
 *     return iter(self.values())             # <<<<<<<<<<<<<<
 * 
 *   def keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":240
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.itervalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":243
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_17keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_17keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_16keys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_16keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  PyObject *__pyx_8genexpr4__pyx_v_k = NULL;
  CYTHON_UNUSED PyObject *__pyx_8genexpr4__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys", 0);

  /* "cexprtk/_symbol_table.pyx":244
 * 
 *   def keys(self):
 *     return [ k for (k,v) in self.items()]             # <<<<<<<<<<<<<<
 * 
 *   def values(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 244, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 244, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 244, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 244, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 244, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 244, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 244, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 244, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr4__pyx_v_k))) __PYX_ERR(0, 244, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k); __pyx_8genexpr4__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_v); __pyx_8genexpr4__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k); __pyx_8genexpr4__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_v); __pyx_8genexpr4__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":243
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":246
 *     return [ k for (k,v) in self.items()]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_19values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_19values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_18values(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_18values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_8genexpr5__pyx_v_k = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);

  /* "cexprtk/_symbol_table.pyx":247
 * 
 *   def values(self):
 *     return [ v for (k,v) in self.items() ]             # <<<<<<<<<<<<<<
 * 
 *   cdef list _get_variable_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 247, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 247, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 247, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 247, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 247, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 247, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 247, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr5__pyx_v_v))) __PYX_ERR(0, 247, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_k); __pyx_8genexpr5__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_v); __pyx_8genexpr5__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_k); __pyx_8genexpr5__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_v); __pyx_8genexpr5__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":246
 *     return [ k for (k,v) in self.items()]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_k);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":249
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cdef list _get_variable_list(self):             # <<<<<<<<<<<<<<
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)
 */

static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables__get_variable_list(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  __pyx_t_6exprtk_LabelFloatPairVector __pyx_v_itemvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6exprtk_LabelFloatPairVector __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_variable_list", 0);

  /* "cexprtk/_symbol_table.pyx":250
 * 
 *   cdef list _get_variable_list(self):
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()             # <<<<<<<<<<<<<<
 *     self._csymtableptr.get_variable_list(itemvector)
 *     return itemvector
 */
  try {
    __pyx_t_1 = __pyx_t_6exprtk_LabelFloatPairVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 250, __pyx_L1_error)
  }
  __pyx_v_itemvector = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":251
 *   cdef list _get_variable_list(self):
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)             # <<<<<<<<<<<<<<
 *     return itemvector
 * 
 */
  (void)(__pyx_v_self->_csymtableptr->get_variable_list(__pyx_v_itemvector));

  /* "cexprtk/_symbol_table.pyx":252
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)
 *     return itemvector             # <<<<<<<<<<<<<<
 * 
 *   cpdef has_key(self, object key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair(__pyx_v_itemvector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":249
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cdef list _get_variable_list(self):             # <<<<<<<<<<<<<<
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables._get_variable_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":254
 *     return itemvector
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     try:
 *       key = str(key)
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_21has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_cstr_key = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  std::string __pyx_t_9;
  bool __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  __Pyx_INCREF(__pyx_v_key);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_21has_key)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":255
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "cexprtk/_symbol_table.pyx":256
 *   cpdef has_key(self, object key):
 *     try:
 *       key = str(key)             # <<<<<<<<<<<<<<
 *     except ValueError:
 *       return False
 */
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":255
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cexprtk/_symbol_table.pyx":257
 *     try:
 *       key = str(key)
 *     except ValueError:             # <<<<<<<<<<<<<<
 *       return False
 * 
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 257, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);

      /* "cexprtk/_symbol_table.pyx":258
 *       key = str(key)
 *     except ValueError:
 *       return False             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes cstr_key = key.encode("ascii")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "cexprtk/_symbol_table.pyx":255
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "cexprtk/_symbol_table.pyx":260
 *       return False
 * 
 *     cdef bytes cstr_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     return self._csymtableptr[0].is_variable(cstr_key) and not self._csymtableptr[0].is_constant_node(cstr_key)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_v_cstr_key = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":261
 * 
 *     cdef bytes cstr_key = key.encode("ascii")
 *     return self._csymtableptr[0].is_variable(cstr_key) and not self._csymtableptr[0].is_constant_node(cstr_key)             # <<<<<<<<<<<<<<
 * 
 *   def __contains__(self, object key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_t_10 = (__pyx_v_self->_csymtableptr[0]).is_variable(__pyx_t_9);
  if (__pyx_t_10) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_t_11 = (!((__pyx_v_self->_csymtableptr[0]).is_constant_node(__pyx_t_9) != 0));
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_L11_bool_binop_done:;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":254
 *     return itemvector
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     try:
 *       key = str(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr_key);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_21has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_21has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_20has_key(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_20has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_has_key(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":263
 *     return self._csymtableptr[0].is_variable(cstr_key) and not self._csymtableptr[0].is_constant_node(cstr_key)
 * 
 *   def __contains__(self, object key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_23__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_23__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_22__contains__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_22__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "cexprtk/_symbol_table.pyx":264
 * 
 *   def __contains__(self, object key):
 *     return self.has_key(key)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self->__pyx_vtab)->has_key(__pyx_v_self, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":263
 *     return self._csymtableptr[0].is_variable(cstr_key) and not self._csymtableptr[0].is_constant_node(cstr_key)
 * 
 *   def __contains__(self, object key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_24__reduce_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_26__setstate_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Variables.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":273
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def  __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes c_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants___getitem__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants___getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_c_key = 0;
  __pyx_t_6exprtk_symbol_table_type *__pyx_v_st;
  __pyx_t_6exprtk_variable_ptr __pyx_v_vptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_6exprtk_symbol_table_type *__pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "cexprtk/_symbol_table.pyx":274
 * 
 *   def  __getitem__(self, object key):
 *     cdef bytes c_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(c_key)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_v_c_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":275
 *   def  __getitem__(self, object key):
 *     cdef bytes c_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr             # <<<<<<<<<<<<<<
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(c_key)
 *     if vptr != NULL and st[0].is_constant_node(c_key):
 */
  __pyx_t_4 = __pyx_v_self->_csymtableptr;
  __pyx_v_st = __pyx_t_4;

  /* "cexprtk/_symbol_table.pyx":276
 *     cdef bytes c_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(c_key)             # <<<<<<<<<<<<<<
 *     if vptr != NULL and st[0].is_constant_node(c_key):
 *       return vptr[0].value()
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_c_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_v_vptr = (__pyx_v_st[0]).get_variable(__pyx_t_5);

  /* "cexprtk/_symbol_table.pyx":277
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(c_key)
 *     if vptr != NULL and st[0].is_constant_node(c_key):             # <<<<<<<<<<<<<<
 *       return vptr[0].value()
 *     else:
 */
  __pyx_t_7 = ((__pyx_v_vptr != NULL) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_c_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_v_st[0]).is_constant_node(__pyx_t_5) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":278
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(c_key)
 *     if vptr != NULL and st[0].is_constant_node(c_key):
 *       return vptr[0].value()             # <<<<<<<<<<<<<<
 *     else:
 *       raise KeyError("Unknown variable: "+key)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_vptr[0]).value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cexprtk/_symbol_table.pyx":277
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.variable_ptr vptr = st[0].get_variable(c_key)
 *     if vptr != NULL and st[0].is_constant_node(c_key):             # <<<<<<<<<<<<<<
 *       return vptr[0].value()
 *     else:
 */
  }

  /* "cexprtk/_symbol_table.pyx":280
 *       return vptr[0].value()
 *     else:
 *       raise KeyError("Unknown variable: "+key)             # <<<<<<<<<<<<<<
 * 
 *   def __iter__(self):
 */
  /*else*/ {
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Unknown_variable, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 280, __pyx_L1_error)
  }

  /* "cexprtk/_symbol_table.pyx":273
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def  __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes c_key = key.encode("ascii")
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":282
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_2__iter__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_2__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "cexprtk/_symbol_table.pyx":283
 * 
 *   def __iter__(self):
 *     return self.iterkeys()             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":282
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":285
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return len(self.items())
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_4__len__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_4__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "cexprtk/_symbol_table.pyx":286
 * 
 *   def __len__(self):
 *     return len(self.items())             # <<<<<<<<<<<<<<
 * 
 *   cpdef list items(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 286, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":285
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return len(self.items())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":288
 *     return len(self.items())
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     cdef object strk
 *     cdef list retlist = []
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_7items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_strk = 0;
  PyObject *__pyx_v_retlist = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  std::string __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_7items)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 288, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":290
 *   cpdef list items(self):
 *     cdef object strk
 *     cdef list retlist = []             # <<<<<<<<<<<<<<
 * 
 *     for (k,v) in self._get_variable_list():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retlist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":292
 *     cdef list retlist = []
 * 
 *     for (k,v) in self._get_variable_list():             # <<<<<<<<<<<<<<
 *       if self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self->__pyx_vtab)->_get_variable_list(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 292, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 292, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 292, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 292, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cexprtk/_symbol_table.pyx":293
 * 
 *     for (k,v) in self._get_variable_list():
 *       if self._csymtableptr.is_constant_node(k):             # <<<<<<<<<<<<<<
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))
 */
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_k); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 293, __pyx_L1_error)
    __pyx_t_9 = (__pyx_v_self->_csymtableptr->is_constant_node(__pyx_t_8) != 0);
    if (__pyx_t_9) {

      /* "cexprtk/_symbol_table.pyx":294
 *     for (k,v) in self._get_variable_list():
 *       if self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")             # <<<<<<<<<<<<<<
 *         retlist.append((strk, v))
 *     return retlist
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_k, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_ascii);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_strk, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":295
 *       if self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))             # <<<<<<<<<<<<<<
 *     return retlist
 * 
 */
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_strk);
      __Pyx_GIVEREF(__pyx_v_strk);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_strk);
      __Pyx_INCREF(__pyx_v_v);
      __Pyx_GIVEREF(__pyx_v_v);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_v);
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_retlist, __pyx_t_1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":293
 * 
 *     for (k,v) in self._get_variable_list():
 *       if self._csymtableptr.is_constant_node(k):             # <<<<<<<<<<<<<<
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))
 */
    }

    /* "cexprtk/_symbol_table.pyx":292
 *     cdef list retlist = []
 * 
 *     for (k,v) in self._get_variable_list():             # <<<<<<<<<<<<<<
 *       if self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":296
 *         strk = k.decode("ascii")
 *         retlist.append((strk, v))
 *     return retlist             # <<<<<<<<<<<<<<
 * 
 *   def iteritems(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retlist);
  __pyx_r = __pyx_v_retlist;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":288
 *     return len(self.items())
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     cdef object strk
 *     cdef list retlist = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strk);
  __Pyx_XDECREF(__pyx_v_retlist);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_7items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_7items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_6items(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_6items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_items(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":298
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_9iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_9iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iteritems (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_8iteritems(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_8iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iteritems", 0);

  /* "cexprtk/_symbol_table.pyx":299
 * 
 *   def iteritems(self):
 *     return iter(self.items())             # <<<<<<<<<<<<<<
 * 
 *   def iterkeys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":298
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.iteritems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":301
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_11iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_11iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterkeys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_10iterkeys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_10iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterkeys", 0);

  /* "cexprtk/_symbol_table.pyx":302
 * 
 *   def iterkeys(self):
 *     return iter(self.keys())             # <<<<<<<<<<<<<<
 * 
 *   def itervalues(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":301
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.iterkeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":304
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_13itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_13itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervalues (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_12itervalues(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_12itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("itervalues", 0);

  /* "cexprtk/_symbol_table.pyx":305
 * 
 *   def itervalues(self):
 *     return iter(self.values())             # <<<<<<<<<<<<<<
 * 
 *   def keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":304
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.itervalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":307
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items() ]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_15keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_15keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_14keys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_14keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  PyObject *__pyx_8genexpr6__pyx_v_k = NULL;
  CYTHON_UNUSED PyObject *__pyx_8genexpr6__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys", 0);

  /* "cexprtk/_symbol_table.pyx":308
 * 
 *   def keys(self):
 *     return [ k for (k,v) in self.items() ]             # <<<<<<<<<<<<<<
 * 
 *   def values(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 308, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 308, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 308, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 308, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 308, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 308, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 308, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 308, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr6__pyx_v_k))) __PYX_ERR(0, 308, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_k); __pyx_8genexpr6__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_v); __pyx_8genexpr6__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_k); __pyx_8genexpr6__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_v); __pyx_8genexpr6__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":307
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items() ]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_k);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":310
 *     return [ k for (k,v) in self.items() ]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_17values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_17values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_16values(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_16values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_8genexpr7__pyx_v_k = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);

  /* "cexprtk/_symbol_table.pyx":311
 * 
 *   def values(self):
 *     return [ v for (k,v) in self.items() ]             # <<<<<<<<<<<<<<
 * 
 *   cdef list _get_variable_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 311, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 311, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 311, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 311, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 311, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 311, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 311, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 311, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr7__pyx_v_v))) __PYX_ERR(0, 311, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_k); __pyx_8genexpr7__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_v); __pyx_8genexpr7__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_k); __pyx_8genexpr7__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_v); __pyx_8genexpr7__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":310
 *     return [ k for (k,v) in self.items() ]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_k);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":313
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cdef list _get_variable_list(self):             # <<<<<<<<<<<<<<
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)
 */

static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants__get_variable_list(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  __pyx_t_6exprtk_LabelFloatPairVector __pyx_v_itemvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6exprtk_LabelFloatPairVector __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_variable_list", 0);

  /* "cexprtk/_symbol_table.pyx":314
 * 
 *   cdef list _get_variable_list(self):
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()             # <<<<<<<<<<<<<<
 *     self._csymtableptr.get_variable_list(itemvector)
 *     return itemvector
 */
  try {
    __pyx_t_1 = __pyx_t_6exprtk_LabelFloatPairVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 314, __pyx_L1_error)
  }
  __pyx_v_itemvector = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":315
 *   cdef list _get_variable_list(self):
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)             # <<<<<<<<<<<<<<
 *     return itemvector
 * 
 */
  (void)(__pyx_v_self->_csymtableptr->get_variable_list(__pyx_v_itemvector));

  /* "cexprtk/_symbol_table.pyx":316
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)
 *     return itemvector             # <<<<<<<<<<<<<<
 * 
 *   cpdef has_key(self, object key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair(__pyx_v_itemvector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 316, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":313
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cdef list _get_variable_list(self):             # <<<<<<<<<<<<<<
 *     cdef exprtk.LabelFloatPairVector itemvector = exprtk.LabelFloatPairVector()
 *     self._csymtableptr.get_variable_list(itemvector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants._get_variable_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":318
 *     return itemvector
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     try:
 *       key = str(key)
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_19has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_c_key = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  std::string __pyx_t_9;
  bool __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  __Pyx_INCREF(__pyx_v_key);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_19has_key)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":319
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "cexprtk/_symbol_table.pyx":320
 *   cpdef has_key(self, object key):
 *     try:
 *       key = str(key)             # <<<<<<<<<<<<<<
 *     except ValueError:
 *       return False
 */
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":319
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cexprtk/_symbol_table.pyx":321
 *     try:
 *       key = str(key)
 *     except ValueError:             # <<<<<<<<<<<<<<
 *       return False
 *     cdef bytes c_key = key.encode("ascii")
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 321, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);

      /* "cexprtk/_symbol_table.pyx":322
 *       key = str(key)
 *     except ValueError:
 *       return False             # <<<<<<<<<<<<<<
 *     cdef bytes c_key = key.encode("ascii")
 *     return self._csymtableptr[0].is_variable(c_key) and self._csymtableptr[0].is_constant_node(c_key)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "cexprtk/_symbol_table.pyx":319
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "cexprtk/_symbol_table.pyx":323
 *     except ValueError:
 *       return False
 *     cdef bytes c_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     return self._csymtableptr[0].is_variable(c_key) and self._csymtableptr[0].is_constant_node(c_key)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_v_c_key = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":324
 *       return False
 *     cdef bytes c_key = key.encode("ascii")
 *     return self._csymtableptr[0].is_variable(c_key) and self._csymtableptr[0].is_constant_node(c_key)             # <<<<<<<<<<<<<<
 * 
 *   def __contains__(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_c_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_t_10 = (__pyx_v_self->_csymtableptr[0]).is_variable(__pyx_t_9);
  if (__pyx_t_10) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_c_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_t_10 = (__pyx_v_self->_csymtableptr[0]).is_constant_node(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_L11_bool_binop_done:;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":318
 *     return itemvector
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     try:
 *       key = str(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_key);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_19has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_19has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_18has_key(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_18has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_has_key(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":326
 *     return self._csymtableptr[0].is_variable(c_key) and self._csymtableptr[0].is_constant_node(c_key)
 * 
 *   def __contains__(self, key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_21__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_21__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_20__contains__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_20__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "cexprtk/_symbol_table.pyx":327
 * 
 *   def __contains__(self, key):
 *     return self.has_key(key)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self->__pyx_vtab)->has_key(__pyx_v_self, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":326
 *     return self._csymtableptr[0].is_variable(c_key) and self._csymtableptr[0].is_constant_node(c_key)
 * 
 *   def __contains__(self, key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_22__reduce_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_24__setstate_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Constants.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":337
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._cfunction_set_ptr = new cset[cfunction_ptr]()
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions___cinit__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions___cinit__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr>  *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cexprtk/_symbol_table.pyx":338
 * 
 *   def __cinit__(self):
 *     self._cfunction_set_ptr = new cset[cfunction_ptr]()             # <<<<<<<<<<<<<<
 * 
 *   def __init__(self):
 */
  try {
    __pyx_t_1 = new std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 338, __pyx_L1_error)
  }
  __pyx_v_self->_cfunction_set_ptr = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":337
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._cfunction_set_ptr = new cset[cfunction_ptr]()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":340
 *     self._cfunction_set_ptr = new cset[cfunction_ptr]()
 * 
 *   def __init__(self):             # <<<<<<<<<<<<<<
 *     self._reservedFunctions = set([
 *       'abs', 'avg', 'ceil', 'clamp', 'equal', 'erf', 'erfc', 'exp',
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_2__init__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_2__init__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cexprtk/_symbol_table.pyx":341
 * 
 *   def __init__(self):
 *     self._reservedFunctions = set([             # <<<<<<<<<<<<<<
 *       'abs', 'avg', 'ceil', 'clamp', 'equal', 'erf', 'erfc', 'exp',
 *       'expm1', 'floor', 'frac',  'log', 'log10', 'log1p',  'log2',
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_n_u_abs) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_avg) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_ceil) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_clamp) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_equal) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_erf) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_erfc) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_exp) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_expm1) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_floor) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_frac) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_log) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_log10) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_log1p) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_log2) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_logn) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_max) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_min) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_mul) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_ncdf) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_nequal) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_root) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_round) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_roundn) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_sgn) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_sqrt) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_sum) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_swap) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_trunc) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_acos) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_acosh) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_asin) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_asinh) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_atan) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_atanh) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_atan2) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_cos) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_cosh) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_cot) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_csc) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_sec) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_sin) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_sinc) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_sinh) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_tan) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_tanh) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_hypot) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_rad2deg) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_deg2grad) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_deg2rad) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_u_grad2deg) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_reservedFunctions);
  __Pyx_DECREF(__pyx_v_self->_reservedFunctions);
  __pyx_v_self->_reservedFunctions = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":340
 *     self._cfunction_set_ptr = new cset[cfunction_ptr]()
 * 
 *   def __init__(self):             # <<<<<<<<<<<<<<
 *     self._reservedFunctions = set([
 *       'abs', 'avg', 'ceil', 'clamp', 'equal', 'erf', 'erfc', 'exp',
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":351
 *       'grad2deg' ])
 * 
 *   cdef cfunction_ptr _getitem(self, bytes key):             # <<<<<<<<<<<<<<
 *     cdef cfunction_ptr fptr
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 */

static __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__getitem(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key) {
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_fptr;
  std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr> ::iterator __pyx_v_it;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getitem", 0);

  /* "cexprtk/_symbol_table.pyx":353
 *   cdef cfunction_ptr _getitem(self, bytes key):
 *     cdef cfunction_ptr fptr
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()             # <<<<<<<<<<<<<<
 *     while it != self._cfunction_set_ptr[0].end():
 *       fptr = deref(it)
 */
  __pyx_v_it = (__pyx_v_self->_cfunction_set_ptr[0]).begin();

  /* "cexprtk/_symbol_table.pyx":354
 *     cdef cfunction_ptr fptr
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     while it != self._cfunction_set_ptr[0].end():             # <<<<<<<<<<<<<<
 *       fptr = deref(it)
 *       if fptr[0].get_key() == key:
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != (__pyx_v_self->_cfunction_set_ptr[0]).end()) != 0);
    if (!__pyx_t_1) break;

    /* "cexprtk/_symbol_table.pyx":355
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     while it != self._cfunction_set_ptr[0].end():
 *       fptr = deref(it)             # <<<<<<<<<<<<<<
 *       if fptr[0].get_key() == key:
 *         return fptr
 */
    __pyx_v_fptr = (*__pyx_v_it);

    /* "cexprtk/_symbol_table.pyx":356
 *     while it != self._cfunction_set_ptr[0].end():
 *       fptr = deref(it)
 *       if fptr[0].get_key() == key:             # <<<<<<<<<<<<<<
 *         return fptr
 *       inc(it)
 */
    if (unlikely(__pyx_v_key == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 356, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_key); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
    __pyx_t_1 = (((__pyx_v_fptr[0]).get_key() == __pyx_t_2) != 0);
    if (__pyx_t_1) {

      /* "cexprtk/_symbol_table.pyx":357
 *       fptr = deref(it)
 *       if fptr[0].get_key() == key:
 *         return fptr             # <<<<<<<<<<<<<<
 *       inc(it)
 *     return NULL
 */
      __pyx_r = __pyx_v_fptr;
      goto __pyx_L0;

      /* "cexprtk/_symbol_table.pyx":356
 *     while it != self._cfunction_set_ptr[0].end():
 *       fptr = deref(it)
 *       if fptr[0].get_key() == key:             # <<<<<<<<<<<<<<
 *         return fptr
 *       inc(it)
 */
    }

    /* "cexprtk/_symbol_table.pyx":358
 *       if fptr[0].get_key() == key:
 *         return fptr
 *       inc(it)             # <<<<<<<<<<<<<<
 *     return NULL
 * 
 */
    (void)((++__pyx_v_it));
  }

  /* "cexprtk/_symbol_table.pyx":359
 *         return fptr
 *       inc(it)
 *     return NULL             # <<<<<<<<<<<<<<
 * 
 *   cdef void _remove_function_from_set(self, cfunction_ptr fptr):
 */
  __pyx_r = NULL;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":351
 *       'grad2deg' ])
 * 
 *   cdef cfunction_ptr _getitem(self, bytes key):             # <<<<<<<<<<<<<<
 *     cdef cfunction_ptr fptr
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cexprtk._symbol_table._Symbol_Table_Functions._getitem", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":361
 *     return NULL
 * 
 *   cdef void _remove_function_from_set(self, cfunction_ptr fptr):             # <<<<<<<<<<<<<<
 *     self._cfunction_set_ptr[0].erase(fptr)
 *     del fptr
 */

static void __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__remove_function_from_set(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_fptr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_remove_function_from_set", 0);

  /* "cexprtk/_symbol_table.pyx":362
 * 
 *   cdef void _remove_function_from_set(self, cfunction_ptr fptr):
 *     self._cfunction_set_ptr[0].erase(fptr)             # <<<<<<<<<<<<<<
 *     del fptr
 * 
 */
  (void)((__pyx_v_self->_cfunction_set_ptr[0]).erase(__pyx_v_fptr));

  /* "cexprtk/_symbol_table.pyx":363
 *   cdef void _remove_function_from_set(self, cfunction_ptr fptr):
 *     self._cfunction_set_ptr[0].erase(fptr)
 *     del fptr             # <<<<<<<<<<<<<<
 * 
 *   cdef void _add_function_to_set(self, cfunction_ptr fptr):
 */
  delete __pyx_v_fptr;

  /* "cexprtk/_symbol_table.pyx":361
 *     return NULL
 * 
 *   cdef void _remove_function_from_set(self, cfunction_ptr fptr):             # <<<<<<<<<<<<<<
 *     self._cfunction_set_ptr[0].erase(fptr)
 *     del fptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cexprtk/_symbol_table.pyx":365
 *     del fptr
 * 
 *   cdef void _add_function_to_set(self, cfunction_ptr fptr):             # <<<<<<<<<<<<<<
 *     self._cfunction_set_ptr[0].insert(fptr)
 * 
 */

static void __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__add_function_to_set(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_fptr) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add_function_to_set", 0);

  /* "cexprtk/_symbol_table.pyx":366
 * 
 *   cdef void _add_function_to_set(self, cfunction_ptr fptr):
 *     self._cfunction_set_ptr[0].insert(fptr)             # <<<<<<<<<<<<<<
 * 
 *   def _checkFunction(self, key, object function):
 */
  try {
    (__pyx_v_self->_cfunction_set_ptr[0]).insert(__pyx_v_fptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 366, __pyx_L1_error)
  }

  /* "cexprtk/_symbol_table.pyx":365
 *     del fptr
 * 
 *   cdef void _add_function_to_set(self, cfunction_ptr fptr):             # <<<<<<<<<<<<<<
 *     self._cfunction_set_ptr[0].insert(fptr)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cexprtk._symbol_table._Symbol_Table_Functions._add_function_to_set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "cexprtk/_symbol_table.pyx":368
 *     self._cfunction_set_ptr[0].insert(fptr)
 * 
 *   def _checkFunction(self, key, object function):             # <<<<<<<<<<<<<<
 *     args = functionargs(function)
 *     #if args == -1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_5_checkFunction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_5_checkFunction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_function = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_checkFunction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_function,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_checkFunction", 1, 2, 2, 1); __PYX_ERR(0, 368, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_checkFunction") < 0)) __PYX_ERR(0, 368, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_function = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_checkFunction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 368, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions._checkFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_4_checkFunction(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self), __pyx_v_key, __pyx_v_function);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_4_checkFunction(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_function) {
  PyObject *__pyx_v_args = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_checkFunction", 0);

  /* "cexprtk/_symbol_table.pyx":369
 * 
 *   def _checkFunction(self, key, object function):
 *     args = functionargs(function)             # <<<<<<<<<<<<<<
 *     #if args == -1:
 *     #  raise TypeError("Functions with varargs are not supported. Whilst setting function for '"+key+"'")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_functionargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_function) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_function);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_args = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":372
 *     #if args == -1:
 *     #  raise TypeError("Functions with varargs are not supported. Whilst setting function for '"+key+"'")
 *     if args > 20:             # <<<<<<<<<<<<<<
 *       raise TypeError("Only functions with 20 or fewer arguments are supported at present. Whilst setting function for '"+key+"'")
 *     return args
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_args, __pyx_int_20, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "cexprtk/_symbol_table.pyx":373
 *     #  raise TypeError("Functions with varargs are not supported. Whilst setting function for '"+key+"'")
 *     if args > 20:
 *       raise TypeError("Only functions with 20 or fewer arguments are supported at present. Whilst setting function for '"+key+"'")             # <<<<<<<<<<<<<<
 *     return args
 * 
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Only_functions_with_20_or_fewer, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_u__10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 373, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":372
 *     #if args == -1:
 *     #  raise TypeError("Functions with varargs are not supported. Whilst setting function for '"+key+"'")
 *     if args > 20:             # <<<<<<<<<<<<<<
 *       raise TypeError("Only functions with 20 or fewer arguments are supported at present. Whilst setting function for '"+key+"'")
 *     return args
 */
  }

  /* "cexprtk/_symbol_table.pyx":374
 *     if args > 20:
 *       raise TypeError("Only functions with 20 or fewer arguments are supported at present. Whilst setting function for '"+key+"'")
 *     return args             # <<<<<<<<<<<<<<
 * 
 *   cdef _wrapFunction(self, key, bytes strkey, object function, int numArgs_):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_args);
  __pyx_r = __pyx_v_args;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":368
 *     self._cfunction_set_ptr[0].insert(fptr)
 * 
 *   def _checkFunction(self, key, object function):             # <<<<<<<<<<<<<<
 *     args = functionargs(function)
 *     #if args == -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions._checkFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":376
 *     return args
 * 
 *   cdef _wrapFunction(self, key, bytes strkey, object function, int numArgs_):             # <<<<<<<<<<<<<<
 *     cdef ifunction_ptr fptr
 *     cdef ivararg_function_ptr vaptr
 */

static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__wrapFunction(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_key, PyObject *__pyx_v_strkey, PyObject *__pyx_v_function, int __pyx_v_numArgs_) {
  __pyx_t_24cexprtk_custom_functions_ifunction_ptr __pyx_v_fptr;
  __pyx_t_24cexprtk_custom_functions_ivararg_function_ptr __pyx_v_vaptr;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_cfptr;
  CYTHON_UNUSED void *__pyx_v_pyptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_24cexprtk_custom_functions_ifunction_ptr __pyx_t_3;
  __pyx_t_24cexprtk_custom_functions_ivararg_function_ptr __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_wrapFunction", 0);

  /* "cexprtk/_symbol_table.pyx":382
 * 
 *     cdef void* pyptr
 *     pyptr = <void *>function             # <<<<<<<<<<<<<<
 *     cfptr = wrapFunction(numArgs_, strkey, function)
 *     self._add_function_to_set(cfptr)
 */
  __pyx_v_pyptr = ((void *)__pyx_v_function);

  /* "cexprtk/_symbol_table.pyx":383
 *     cdef void* pyptr
 *     pyptr = <void *>function
 *     cfptr = wrapFunction(numArgs_, strkey, function)             # <<<<<<<<<<<<<<
 *     self._add_function_to_set(cfptr)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_strkey); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
  __pyx_v_cfptr = __pyx_f_7cexprtk_26_custom_function_callbacks_wrapFunction(__pyx_v_numArgs_, __pyx_t_1, __pyx_v_function);

  /* "cexprtk/_symbol_table.pyx":384
 *     pyptr = <void *>function
 *     cfptr = wrapFunction(numArgs_, strkey, function)
 *     self._add_function_to_set(cfptr)             # <<<<<<<<<<<<<<
 * 
 *     if numArgs_ != -1:
 */
  ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->_add_function_to_set(__pyx_v_self, __pyx_v_cfptr);

  /* "cexprtk/_symbol_table.pyx":386
 *     self._add_function_to_set(cfptr)
 * 
 *     if numArgs_ != -1:             # <<<<<<<<<<<<<<
 *       fptr = dynamic_cast[ifunction_ptr](cfptr)
 *       # Add the function to the symboltable
 */
  __pyx_t_2 = ((__pyx_v_numArgs_ != -1L) != 0);
  if (__pyx_t_2) {

    /* "cexprtk/_symbol_table.pyx":387
 * 
 *     if numArgs_ != -1:
 *       fptr = dynamic_cast[ifunction_ptr](cfptr)             # <<<<<<<<<<<<<<
 *       # Add the function to the symboltable
 *       cexprtk_util.add_function(self._csymtableptr[0], strkey, fptr[0])
 */
    try {
      __pyx_t_3 = dynamic_cast<__pyx_t_24cexprtk_custom_functions_ifunction_ptr>(__pyx_v_cfptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 387, __pyx_L1_error)
    }
    __pyx_v_fptr = __pyx_t_3;

    /* "cexprtk/_symbol_table.pyx":389
 *       fptr = dynamic_cast[ifunction_ptr](cfptr)
 *       # Add the function to the symboltable
 *       cexprtk_util.add_function(self._csymtableptr[0], strkey, fptr[0])             # <<<<<<<<<<<<<<
 *     else:
 *       # Add var arg function
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_strkey); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L1_error)
    (void)(add_function((__pyx_v_self->_csymtableptr[0]), __pyx_t_1, (__pyx_v_fptr[0])));

    /* "cexprtk/_symbol_table.pyx":386
 *     self._add_function_to_set(cfptr)
 * 
 *     if numArgs_ != -1:             # <<<<<<<<<<<<<<
 *       fptr = dynamic_cast[ifunction_ptr](cfptr)
 *       # Add the function to the symboltable
 */
    goto __pyx_L3;
  }

  /* "cexprtk/_symbol_table.pyx":392
 *     else:
 *       # Add var arg function
 *       vaptr = dynamic_cast[ivararg_function_ptr](cfptr)             # <<<<<<<<<<<<<<
 *       cexprtk_util.add_varargfunction(self._csymtableptr[0], strkey, vaptr[0])
 * 
 */
  /*else*/ {
    try {
      __pyx_t_4 = dynamic_cast<__pyx_t_24cexprtk_custom_functions_ivararg_function_ptr>(__pyx_v_cfptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 392, __pyx_L1_error)
    }
    __pyx_v_vaptr = __pyx_t_4;

    /* "cexprtk/_symbol_table.pyx":393
 *       # Add var arg function
 *       vaptr = dynamic_cast[ivararg_function_ptr](cfptr)
 *       cexprtk_util.add_varargfunction(self._csymtableptr[0], strkey, vaptr[0])             # <<<<<<<<<<<<<<
 * 
 *   cdef _resetFunctionExceptions(self):
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_strkey); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
    (void)(add_varargfunction((__pyx_v_self->_csymtableptr[0]), __pyx_t_1, (__pyx_v_vaptr[0])));
  }
  __pyx_L3:;

  /* "cexprtk/_symbol_table.pyx":376
 *     return args
 * 
 *   cdef _wrapFunction(self, key, bytes strkey, object function, int numArgs_):             # <<<<<<<<<<<<<<
 *     cdef ifunction_ptr fptr
 *     cdef ivararg_function_ptr vaptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions._wrapFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":395
 *       cexprtk_util.add_varargfunction(self._csymtableptr[0], strkey, vaptr[0])
 * 
 *   cdef _resetFunctionExceptions(self):             # <<<<<<<<<<<<<<
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 */

static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__resetFunctionExceptions(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr> ::iterator __pyx_v_it;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_func_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_resetFunctionExceptions", 0);

  /* "cexprtk/_symbol_table.pyx":396
 * 
 *   cdef _resetFunctionExceptions(self):
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()             # <<<<<<<<<<<<<<
 *     cdef cfunction_ptr func_ptr
 *     while it != self._cfunction_set_ptr[0].end():
 */
  __pyx_v_it = (__pyx_v_self->_cfunction_set_ptr[0]).begin();

  /* "cexprtk/_symbol_table.pyx":398
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 *     while it != self._cfunction_set_ptr[0].end():             # <<<<<<<<<<<<<<
 *       func_ptr = deref(it)
 *       func_ptr[0].resetException()
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != (__pyx_v_self->_cfunction_set_ptr[0]).end()) != 0);
    if (!__pyx_t_1) break;

    /* "cexprtk/_symbol_table.pyx":399
 *     cdef cfunction_ptr func_ptr
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)             # <<<<<<<<<<<<<<
 *       func_ptr[0].resetException()
 *       inc(it)
 */
    __pyx_v_func_ptr = (*__pyx_v_it);

    /* "cexprtk/_symbol_table.pyx":400
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)
 *       func_ptr[0].resetException()             # <<<<<<<<<<<<<<
 *       inc(it)
 * 
 */
    (__pyx_v_func_ptr[0]).resetException();

    /* "cexprtk/_symbol_table.pyx":401
 *       func_ptr = deref(it)
 *       func_ptr[0].resetException()
 *       inc(it)             # <<<<<<<<<<<<<<
 * 
 *   cdef object _checkForException(self):
 */
    (void)((++__pyx_v_it));
  }

  /* "cexprtk/_symbol_table.pyx":395
 *       cexprtk_util.add_varargfunction(self._csymtableptr[0], strkey, vaptr[0])
 * 
 *   cdef _resetFunctionExceptions(self):             # <<<<<<<<<<<<<<
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":403
 *       inc(it)
 * 
 *   cdef object _checkForException(self):             # <<<<<<<<<<<<<<
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 */

static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__checkForException(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr> ::iterator __pyx_v_it;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_func_ptr;
  PyObject *__pyx_v_exception = 0;
  void *__pyx_v_exception_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_checkForException", 0);

  /* "cexprtk/_symbol_table.pyx":404
 * 
 *   cdef object _checkForException(self):
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()             # <<<<<<<<<<<<<<
 *     cdef cfunction_ptr func_ptr
 *     cdef object exception = None
 */
  __pyx_v_it = (__pyx_v_self->_cfunction_set_ptr[0]).begin();

  /* "cexprtk/_symbol_table.pyx":406
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 *     cdef object exception = None             # <<<<<<<<<<<<<<
 *     cdef void * exception_ptr
 *     while it != self._cfunction_set_ptr[0].end():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_exception = Py_None;

  /* "cexprtk/_symbol_table.pyx":408
 *     cdef object exception = None
 *     cdef void * exception_ptr
 *     while it != self._cfunction_set_ptr[0].end():             # <<<<<<<<<<<<<<
 *       func_ptr = deref(it)
 *       exception_ptr = func_ptr[0].exception()
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != (__pyx_v_self->_cfunction_set_ptr[0]).end()) != 0);
    if (!__pyx_t_1) break;

    /* "cexprtk/_symbol_table.pyx":409
 *     cdef void * exception_ptr
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)             # <<<<<<<<<<<<<<
 *       exception_ptr = func_ptr[0].exception()
 *       if exception_ptr:
 */
    __pyx_v_func_ptr = (*__pyx_v_it);

    /* "cexprtk/_symbol_table.pyx":410
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)
 *       exception_ptr = func_ptr[0].exception()             # <<<<<<<<<<<<<<
 *       if exception_ptr:
 *         exception = <object> exception_ptr
 */
    __pyx_v_exception_ptr = (__pyx_v_func_ptr[0]).exception();

    /* "cexprtk/_symbol_table.pyx":411
 *       func_ptr = deref(it)
 *       exception_ptr = func_ptr[0].exception()
 *       if exception_ptr:             # <<<<<<<<<<<<<<
 *         exception = <object> exception_ptr
 *         return exception
 */
    __pyx_t_1 = (__pyx_v_exception_ptr != 0);
    if (__pyx_t_1) {

      /* "cexprtk/_symbol_table.pyx":412
 *       exception_ptr = func_ptr[0].exception()
 *       if exception_ptr:
 *         exception = <object> exception_ptr             # <<<<<<<<<<<<<<
 *         return exception
 *       inc(it)
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_exception_ptr);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_exception, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "cexprtk/_symbol_table.pyx":413
 *       if exception_ptr:
 *         exception = <object> exception_ptr
 *         return exception             # <<<<<<<<<<<<<<
 *       inc(it)
 *     return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_exception);
      __pyx_r = __pyx_v_exception;
      goto __pyx_L0;

      /* "cexprtk/_symbol_table.pyx":411
 *       func_ptr = deref(it)
 *       exception_ptr = func_ptr[0].exception()
 *       if exception_ptr:             # <<<<<<<<<<<<<<
 *         exception = <object> exception_ptr
 *         return exception
 */
    }

    /* "cexprtk/_symbol_table.pyx":414
 *         exception = <object> exception_ptr
 *         return exception
 *       inc(it)             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
    (void)((++__pyx_v_it));
  }

  /* "cexprtk/_symbol_table.pyx":415
 *         return exception
 *       inc(it)
 *     return None             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":403
 *       inc(it)
 * 
 *   cdef object _checkForException(self):             # <<<<<<<<<<<<<<
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_exception);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":417
 *     return None
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 */

/* Python wrapper */
static void __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_6__dealloc__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_6__dealloc__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr> ::iterator __pyx_v_it;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_func_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cexprtk/_symbol_table.pyx":418
 * 
 *   def __dealloc__(self):
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()             # <<<<<<<<<<<<<<
 *     cdef cfunction_ptr func_ptr
 *     while it != self._cfunction_set_ptr[0].end():
 */
  __pyx_v_it = (__pyx_v_self->_cfunction_set_ptr[0]).begin();

  /* "cexprtk/_symbol_table.pyx":420
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 *     while it != self._cfunction_set_ptr[0].end():             # <<<<<<<<<<<<<<
 *       func_ptr = deref(it)
 *       inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != (__pyx_v_self->_cfunction_set_ptr[0]).end()) != 0);
    if (!__pyx_t_1) break;

    /* "cexprtk/_symbol_table.pyx":421
 *     cdef cfunction_ptr func_ptr
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)             # <<<<<<<<<<<<<<
 *       inc(it)
 *       del func_ptr
 */
    __pyx_v_func_ptr = (*__pyx_v_it);

    /* "cexprtk/_symbol_table.pyx":422
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)
 *       inc(it)             # <<<<<<<<<<<<<<
 *       del func_ptr
 *     del self._cfunction_set_ptr
 */
    (void)((++__pyx_v_it));

    /* "cexprtk/_symbol_table.pyx":423
 *       func_ptr = deref(it)
 *       inc(it)
 *       del func_ptr             # <<<<<<<<<<<<<<
 *     del self._cfunction_set_ptr
 * 
 */
    delete __pyx_v_func_ptr;
  }

  /* "cexprtk/_symbol_table.pyx":424
 *       inc(it)
 *       del func_ptr
 *     del self._cfunction_set_ptr             # <<<<<<<<<<<<<<
 * 
 *   def __getitem__(self, object key):
 */
  delete __pyx_v_self->_cfunction_set_ptr;

  /* "cexprtk/_symbol_table.pyx":417
 *     return None
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cexprtk/_symbol_table.pyx":426
 *     del self._cfunction_set_ptr
 * 
 *   def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef void * pyptr
 *     cdef cfunction_ptr fptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_8__getitem__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_8__getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key) {
  void *__pyx_v_pyptr;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_fptr;
  PyObject *__pyx_v_cstr_key = 0;
  PyObject *__pyx_v_pyfunction = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "cexprtk/_symbol_table.pyx":429
 *     cdef void * pyptr
 *     cdef cfunction_ptr fptr
 *     cdef bytes cstr_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 429, __pyx_L1_error)
  __pyx_v_cstr_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":430
 *     cdef cfunction_ptr fptr
 *     cdef bytes cstr_key = key.encode("ascii")
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     fptr = self._getitem(cstr_key)
 */
  __pyx_t_4 = ((!(__pyx_v_self->_csymtableptr != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "cexprtk/_symbol_table.pyx":431
 *     cdef bytes cstr_key = key.encode("ascii")
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")             # <<<<<<<<<<<<<<
 *     fptr = self._getitem(cstr_key)
 *     if fptr:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ReferenceError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 431, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":430
 *     cdef cfunction_ptr fptr
 *     cdef bytes cstr_key = key.encode("ascii")
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     fptr = self._getitem(cstr_key)
 */
  }

  /* "cexprtk/_symbol_table.pyx":432
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     fptr = self._getitem(cstr_key)             # <<<<<<<<<<<<<<
 *     if fptr:
 *       pyptr = fptr[0].get_pycallable()
 */
  __pyx_v_fptr = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->_getitem(__pyx_v_self, __pyx_v_cstr_key);

  /* "cexprtk/_symbol_table.pyx":433
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     fptr = self._getitem(cstr_key)
 *     if fptr:             # <<<<<<<<<<<<<<
 *       pyptr = fptr[0].get_pycallable()
 *       pyfunction = <object>pyptr
 */
  __pyx_t_4 = (__pyx_v_fptr != 0);
  if (likely(__pyx_t_4)) {

    /* "cexprtk/_symbol_table.pyx":434
 *     fptr = self._getitem(cstr_key)
 *     if fptr:
 *       pyptr = fptr[0].get_pycallable()             # <<<<<<<<<<<<<<
 *       pyfunction = <object>pyptr
 *       return pyfunction
 */
    __pyx_v_pyptr = (__pyx_v_fptr[0]).get_pycallable();

    /* "cexprtk/_symbol_table.pyx":435
 *     if fptr:
 *       pyptr = fptr[0].get_pycallable()
 *       pyfunction = <object>pyptr             # <<<<<<<<<<<<<<
 *       return pyfunction
 *     else:
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_pyptr);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_pyfunction = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":436
 *       pyptr = fptr[0].get_pycallable()
 *       pyfunction = <object>pyptr
 *       return pyfunction             # <<<<<<<<<<<<<<
 *     else:
 *       raise KeyError("Unknown function: "+key)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pyfunction);
    __pyx_r = __pyx_v_pyfunction;
    goto __pyx_L0;

    /* "cexprtk/_symbol_table.pyx":433
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     fptr = self._getitem(cstr_key)
 *     if fptr:             # <<<<<<<<<<<<<<
 *       pyptr = fptr[0].get_pycallable()
 *       pyfunction = <object>pyptr
 */
  }

  /* "cexprtk/_symbol_table.pyx":438
 *       return pyfunction
 *     else:
 *       raise KeyError("Unknown function: "+key)             # <<<<<<<<<<<<<<
 * 
 *   def __setitem__(self, object key, object f):
 */
  /*else*/ {
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Unknown_function, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 438, __pyx_L1_error)
  }

  /* "cexprtk/_symbol_table.pyx":426
 *     del self._cfunction_set_ptr
 * 
 *   def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef void * pyptr
 *     cdef cfunction_ptr fptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr_key);
  __Pyx_XDECREF(__pyx_v_pyfunction);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":440
 *       raise KeyError("Unknown function: "+key)
 * 
 *   def __setitem__(self, object key, object f):             # <<<<<<<<<<<<<<
 *     cdef int rv
 *     cdef string strkey
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_f); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_f) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_10__setitem__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((PyObject *)__pyx_v_f));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_10__setitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_f) {
  std::string __pyx_v_strkey;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_cfuncptr;
  PyObject *__pyx_v_numArgs = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "cexprtk/_symbol_table.pyx":444
 *     cdef string strkey
 *     cdef cfunction_ptr cfuncptr
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")
 */
  __pyx_t_1 = ((!(__pyx_v_self->_csymtableptr != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":445
 *     cdef cfunction_ptr cfuncptr
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")             # <<<<<<<<<<<<<<
 *     strkey = key.encode("ascii")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ReferenceError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 445, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":444
 *     cdef string strkey
 *     cdef cfunction_ptr cfuncptr
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")
 */
  }

  /* "cexprtk/_symbol_table.pyx":446
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")             # <<<<<<<<<<<<<<
 * 
 *     if key in self._reservedFunctions:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_strkey = __pyx_t_5;

  /* "cexprtk/_symbol_table.pyx":448
 *     strkey = key.encode("ascii")
 * 
 *     if key in self._reservedFunctions:             # <<<<<<<<<<<<<<
 *       raise ReservedFunctionShadowException("Function has same name as a built-in exprtk function: "+str(key))
 * 
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_self->_reservedFunctions, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":449
 * 
 *     if key in self._reservedFunctions:
 *       raise ReservedFunctionShadowException("Function has same name as a built-in exprtk function: "+str(key))             # <<<<<<<<<<<<<<
 * 
 *     # Check if there is already a variable or constant assigned to this key.
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ReservedFunctionShadowException); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Function_has_same_name_as_a_buil, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 449, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":448
 *     strkey = key.encode("ascii")
 * 
 *     if key in self._reservedFunctions:             # <<<<<<<<<<<<<<
 *       raise ReservedFunctionShadowException("Function has same name as a built-in exprtk function: "+str(key))
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":453
 *     # Check if there is already a variable or constant assigned to this key.
 *     # If there is, then raise VariableShadow exception.
 *     if is_constant(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Function cannot be set because a constant shares the same name:" + key)
 * 
 */
  __pyx_t_6 = (__pyx_f_7cexprtk_13_symbol_table_is_constant(__pyx_v_strkey, __pyx_v_self->_csymtableptr) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":454
 *     # If there is, then raise VariableShadow exception.
 *     if is_constant(strkey, self._csymtableptr):
 *       raise KeyError("Function cannot be set because a constant shares the same name:" + key)             # <<<<<<<<<<<<<<
 * 
 *     if is_variable(strkey, self._csymtableptr):
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_Function_cannot_be_set_because_a, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 454, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":453
 *     # Check if there is already a variable or constant assigned to this key.
 *     # If there is, then raise VariableShadow exception.
 *     if is_constant(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Function cannot be set because a constant shares the same name:" + key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":456
 *       raise KeyError("Function cannot be set because a constant shares the same name:" + key)
 * 
 *     if is_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Function cannot be set because a variable shares the same name:" + key)
 * 
 */
  __pyx_t_6 = (__pyx_f_7cexprtk_13_symbol_table_is_variable(__pyx_v_strkey, __pyx_v_self->_csymtableptr) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":457
 * 
 *     if is_variable(strkey, self._csymtableptr):
 *       raise KeyError("Function cannot be set because a variable shares the same name:" + key)             # <<<<<<<<<<<<<<
 * 
 *     if is_string_variable(strkey, self._csymtableptr):
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_u_Function_cannot_be_set_because_a_2, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 457, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":456
 *       raise KeyError("Function cannot be set because a constant shares the same name:" + key)
 * 
 *     if is_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Function cannot be set because a variable shares the same name:" + key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":459
 *       raise KeyError("Function cannot be set because a variable shares the same name:" + key)
 * 
 *     if is_string_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Function cannot be set because a string variable shares the same name:" + key)
 * 
 */
  __pyx_t_6 = (__pyx_f_7cexprtk_13_symbol_table_is_string_variable(__pyx_v_strkey, __pyx_v_self->_csymtableptr) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":460
 * 
 *     if is_string_variable(strkey, self._csymtableptr):
 *       raise KeyError("Function cannot be set because a string variable shares the same name:" + key)             # <<<<<<<<<<<<<<
 * 
 *     cfuncptr = self._getitem(strkey)
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_Function_cannot_be_set_because_a_3, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 460, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":459
 *       raise KeyError("Function cannot be set because a variable shares the same name:" + key)
 * 
 *     if is_string_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Function cannot be set because a string variable shares the same name:" + key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":462
 *       raise KeyError("Function cannot be set because a string variable shares the same name:" + key)
 * 
 *     cfuncptr = self._getitem(strkey)             # <<<<<<<<<<<<<<
 *     if cfuncptr != NULL:
 *       raise KeyError("Function '"+key+"' was already in symbol table.")
 */
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_strkey); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_cfuncptr = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->_getitem(__pyx_v_self, ((PyObject*)__pyx_t_3));
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":463
 * 
 *     cfuncptr = self._getitem(strkey)
 *     if cfuncptr != NULL:             # <<<<<<<<<<<<<<
 *       raise KeyError("Function '"+key+"' was already in symbol table.")
 * 
 */
  __pyx_t_6 = ((__pyx_v_cfuncptr != NULL) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":464
 *     cfuncptr = self._getitem(strkey)
 *     if cfuncptr != NULL:
 *       raise KeyError("Function '"+key+"' was already in symbol table.")             # <<<<<<<<<<<<<<
 * 
 *     # Wrap the new function
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_u_Function, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_u_was_already_in_symbol_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 464, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":463
 * 
 *     cfuncptr = self._getitem(strkey)
 *     if cfuncptr != NULL:             # <<<<<<<<<<<<<<
 *       raise KeyError("Function '"+key+"' was already in symbol table.")
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":467
 * 
 *     # Wrap the new function
 *     numArgs = self._checkFunction(key,f)             # <<<<<<<<<<<<<<
 *     self._wrapFunction(key, strkey, f, numArgs)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_checkFunction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_key, __pyx_v_f};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_key, __pyx_v_f};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_key);
    __Pyx_INCREF(__pyx_v_f);
    __Pyx_GIVEREF(__pyx_v_f);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_f);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_numArgs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":468
 *     # Wrap the new function
 *     numArgs = self._checkFunction(key,f)
 *     self._wrapFunction(key, strkey, f, numArgs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_strkey); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_numArgs); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->_wrapFunction(__pyx_v_self, __pyx_v_key, ((PyObject*)__pyx_t_3), __pyx_v_f, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":440
 *       raise KeyError("Unknown function: "+key)
 * 
 *   def __setitem__(self, object key, object f):             # <<<<<<<<<<<<<<
 *     cdef int rv
 *     cdef string strkey
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_numArgs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":471
 * 
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_13__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_13__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_12__iter__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_12__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "cexprtk/_symbol_table.pyx":472
 * 
 *   def __iter__(self):
 *     return self.iterkeys()             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":471
 * 
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":474
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._cfunction_set_ptr[0].size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_15__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_15__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_14__len__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_14__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "cexprtk/_symbol_table.pyx":475
 * 
 *   def __len__(self):
 *     return self._cfunction_set_ptr[0].size()             # <<<<<<<<<<<<<<
 * 
 *   cpdef list items(self):
 */
  __pyx_r = (__pyx_v_self->_cfunction_set_ptr[0]).size();
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":474
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._cfunction_set_ptr[0].size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":477
 *     return self._cfunction_set_ptr[0].size()
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, int __pyx_skip_dispatch) {
  std::set<__pyx_t_24cexprtk_custom_functions_cfunction_ptr> ::iterator __pyx_v_it;
  __pyx_t_24cexprtk_custom_functions_cfunction_ptr __pyx_v_func_ptr;
  PyObject *__pyx_v_pyfunc = 0;
  std::string __pyx_v_cstr;
  PyObject *__pyx_v_strk = 0;
  PyObject *__pyx_v_retlist = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_17items)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 477, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":478
 * 
 *   cpdef list items(self):
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 */
  __pyx_t_5 = ((!(__pyx_v_self->_csymtableptr != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cexprtk/_symbol_table.pyx":479
 *   cpdef list items(self):
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")             # <<<<<<<<<<<<<<
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 *     cdef cfunction_ptr func_ptr
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ReferenceError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 479, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":478
 * 
 *   cpdef list items(self):
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()
 */
  }

  /* "cexprtk/_symbol_table.pyx":480
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     cdef cset[cfunction_ptr].iterator it = self._cfunction_set_ptr[0].begin()             # <<<<<<<<<<<<<<
 *     cdef cfunction_ptr func_ptr
 *     cdef object pyfunc
 */
  __pyx_v_it = (__pyx_v_self->_cfunction_set_ptr[0]).begin();

  /* "cexprtk/_symbol_table.pyx":485
 *     cdef string cstr
 *     cdef object strk
 *     cdef list retlist = []             # <<<<<<<<<<<<<<
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retlist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":486
 *     cdef object strk
 *     cdef list retlist = []
 *     while it != self._cfunction_set_ptr[0].end():             # <<<<<<<<<<<<<<
 *       func_ptr = deref(it)
 *       cstr = func_ptr[0].get_key()
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_it != (__pyx_v_self->_cfunction_set_ptr[0]).end()) != 0);
    if (!__pyx_t_5) break;

    /* "cexprtk/_symbol_table.pyx":487
 *     cdef list retlist = []
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)             # <<<<<<<<<<<<<<
 *       cstr = func_ptr[0].get_key()
 *       strk = cstr.decode("ascii")
 */
    __pyx_v_func_ptr = (*__pyx_v_it);

    /* "cexprtk/_symbol_table.pyx":488
 *     while it != self._cfunction_set_ptr[0].end():
 *       func_ptr = deref(it)
 *       cstr = func_ptr[0].get_key()             # <<<<<<<<<<<<<<
 *       strk = cstr.decode("ascii")
 *       pyfunc = <object> func_ptr[0].get_pycallable()
 */
    __pyx_v_cstr = (__pyx_v_func_ptr[0]).get_key();

    /* "cexprtk/_symbol_table.pyx":489
 *       func_ptr = deref(it)
 *       cstr = func_ptr[0].get_key()
 *       strk = cstr.decode("ascii")             # <<<<<<<<<<<<<<
 *       pyfunc = <object> func_ptr[0].get_pycallable()
 *       retlist.append((strk, pyfunc))
 */
    __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cstr, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_strk, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":490
 *       cstr = func_ptr[0].get_key()
 *       strk = cstr.decode("ascii")
 *       pyfunc = <object> func_ptr[0].get_pycallable()             # <<<<<<<<<<<<<<
 *       retlist.append((strk, pyfunc))
 *       inc(it)
 */
    __pyx_t_6 = (__pyx_v_func_ptr[0]).get_pycallable();
    __pyx_t_1 = ((PyObject *)__pyx_t_6);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_pyfunc, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":491
 *       strk = cstr.decode("ascii")
 *       pyfunc = <object> func_ptr[0].get_pycallable()
 *       retlist.append((strk, pyfunc))             # <<<<<<<<<<<<<<
 *       inc(it)
 *     return retlist
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_strk);
    __Pyx_GIVEREF(__pyx_v_strk);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_strk);
    __Pyx_INCREF(__pyx_v_pyfunc);
    __Pyx_GIVEREF(__pyx_v_pyfunc);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_pyfunc);
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_retlist, __pyx_t_1); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":492
 *       pyfunc = <object> func_ptr[0].get_pycallable()
 *       retlist.append((strk, pyfunc))
 *       inc(it)             # <<<<<<<<<<<<<<
 *     return retlist
 * 
 */
    (void)((++__pyx_v_it));
  }

  /* "cexprtk/_symbol_table.pyx":493
 *       retlist.append((strk, pyfunc))
 *       inc(it)
 *     return retlist             # <<<<<<<<<<<<<<
 * 
 *   def iteritems(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retlist);
  __pyx_r = __pyx_v_retlist;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":477
 *     return self._cfunction_set_ptr[0].size()
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyfunc);
  __Pyx_XDECREF(__pyx_v_strk);
  __Pyx_XDECREF(__pyx_v_retlist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_16items(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_16items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_items(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":495
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_19iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_19iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iteritems (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_18iteritems(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_18iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iteritems", 0);

  /* "cexprtk/_symbol_table.pyx":496
 * 
 *   def iteritems(self):
 *     return iter(self.items())             # <<<<<<<<<<<<<<
 * 
 *   def iterkeys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":495
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.iteritems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":498
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_21iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_21iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterkeys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_20iterkeys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_20iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterkeys", 0);

  /* "cexprtk/_symbol_table.pyx":499
 * 
 *   def iterkeys(self):
 *     return iter(self.keys())             # <<<<<<<<<<<<<<
 * 
 *   def itervalues(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":498
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.iterkeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":501
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_23itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_23itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervalues (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_22itervalues(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_22itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("itervalues", 0);

  /* "cexprtk/_symbol_table.pyx":502
 * 
 *   def itervalues(self):
 *     return iter(self.values())             # <<<<<<<<<<<<<<
 * 
 *   def keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":501
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.itervalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":504
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_25keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_25keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_24keys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_24keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  PyObject *__pyx_8genexpr8__pyx_v_k = NULL;
  CYTHON_UNUSED PyObject *__pyx_8genexpr8__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys", 0);

  /* "cexprtk/_symbol_table.pyx":505
 * 
 *   def keys(self):
 *     return [ k for (k,v) in self.items()]             # <<<<<<<<<<<<<<
 * 
 *   def values(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 505, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 505, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 505, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 505, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 505, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 505, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 505, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr8__pyx_v_k))) __PYX_ERR(0, 505, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_k); __pyx_8genexpr8__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_v); __pyx_8genexpr8__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_k); __pyx_8genexpr8__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_v); __pyx_8genexpr8__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":504
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_k);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":507
 *     return [ k for (k,v) in self.items()]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_27values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_27values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_26values(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_26values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_8genexpr9__pyx_v_k = NULL;
  PyObject *__pyx_8genexpr9__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);

  /* "cexprtk/_symbol_table.pyx":508
 * 
 *   def values(self):
 *     return [ v for (k,v) in self.items() ]             # <<<<<<<<<<<<<<
 * 
 *   cpdef has_key(self, object key):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 508, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 508, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 508, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 508, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 508, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 508, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr9__pyx_v_v))) __PYX_ERR(0, 508, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_k); __pyx_8genexpr9__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_v); __pyx_8genexpr9__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_k); __pyx_8genexpr9__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_v); __pyx_8genexpr9__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":507
 *     return [ k for (k,v) in self.items()]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_k);
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":510
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr_key = key.encode("ascii")
 *     return self._getitem(cstr_key) != NULL
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_29has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_cstr_key = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_29has_key)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":511
 * 
 *   cpdef has_key(self, object key):
 *     cdef bytes cstr_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     return self._getitem(cstr_key) != NULL
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 511, __pyx_L1_error)
  __pyx_v_cstr_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":512
 *   cpdef has_key(self, object key):
 *     cdef bytes cstr_key = key.encode("ascii")
 *     return self._getitem(cstr_key) != NULL             # <<<<<<<<<<<<<<
 * 
 *   def __contains__(self, object key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->_getitem(__pyx_v_self, __pyx_v_cstr_key) != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":510
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr_key = key.encode("ascii")
 *     return self._getitem(cstr_key) != NULL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_29has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_29has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_28has_key(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_28has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_has_key(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":514
 *     return self._getitem(cstr_key) != NULL
 * 
 *   def __contains__(self, object key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_31__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_31__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_30__contains__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_30__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "cexprtk/_symbol_table.pyx":515
 * 
 *   def __contains__(self, object key):
 *     return self.has_key(key)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self->__pyx_vtab)->has_key(__pyx_v_self, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":514
 *     return self._getitem(cstr_key) != NULL
 * 
 *   def __contains__(self, object key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_32__reduce_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_34__setstate_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_Functions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":525
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr_key = key.encode("ascii")
 *     cdef object strv
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables___getitem__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables___getitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_cstr_key = 0;
  PyObject *__pyx_v_strv = 0;
  __pyx_t_6exprtk_symbol_table_type *__pyx_v_st;
  __pyx_t_6exprtk_stringvar_ptr __pyx_v_vptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_6exprtk_symbol_table_type *__pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "cexprtk/_symbol_table.pyx":526
 * 
 *   def __getitem__(self, object key):
 *     cdef bytes cstr_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     cdef object strv
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_v_cstr_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":528
 *     cdef bytes cstr_key = key.encode("ascii")
 *     cdef object strv
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr             # <<<<<<<<<<<<<<
 *     cdef exprtk.stringvar_ptr vptr = st[0].get_stringvar(cstr_key)
 *     if vptr != NULL:
 */
  __pyx_t_4 = __pyx_v_self->_csymtableptr;
  __pyx_v_st = __pyx_t_4;

  /* "cexprtk/_symbol_table.pyx":529
 *     cdef object strv
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.stringvar_ptr vptr = st[0].get_stringvar(cstr_key)             # <<<<<<<<<<<<<<
 *     if vptr != NULL:
 *       strv = vptr[0].ref().decode("ascii")
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L1_error)
  __pyx_v_vptr = (__pyx_v_st[0]).get_stringvar(__pyx_t_5);

  /* "cexprtk/_symbol_table.pyx":530
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.stringvar_ptr vptr = st[0].get_stringvar(cstr_key)
 *     if vptr != NULL:             # <<<<<<<<<<<<<<
 *       strv = vptr[0].ref().decode("ascii")
 *       return strv
 */
  __pyx_t_6 = ((__pyx_v_vptr != NULL) != 0);
  if (likely(__pyx_t_6)) {

    /* "cexprtk/_symbol_table.pyx":531
 *     cdef exprtk.stringvar_ptr vptr = st[0].get_stringvar(cstr_key)
 *     if vptr != NULL:
 *       strv = vptr[0].ref().decode("ascii")             # <<<<<<<<<<<<<<
 *       return strv
 *     else:
 */
    __pyx_t_1 = __Pyx_decode_cpp_string((__pyx_v_vptr[0]).ref(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_strv = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cexprtk/_symbol_table.pyx":532
 *     if vptr != NULL:
 *       strv = vptr[0].ref().decode("ascii")
 *       return strv             # <<<<<<<<<<<<<<
 *     else:
 *       raise KeyError("Unknown string_variable: "+key)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_strv);
    __pyx_r = __pyx_v_strv;
    goto __pyx_L0;

    /* "cexprtk/_symbol_table.pyx":530
 *     cdef exprtk.symbol_table_type* st = self._csymtableptr
 *     cdef exprtk.stringvar_ptr vptr = st[0].get_stringvar(cstr_key)
 *     if vptr != NULL:             # <<<<<<<<<<<<<<
 *       strv = vptr[0].ref().decode("ascii")
 *       return strv
 */
  }

  /* "cexprtk/_symbol_table.pyx":534
 *       return strv
 *     else:
 *       raise KeyError("Unknown string_variable: "+key)             # <<<<<<<<<<<<<<
 * 
 *   def __setitem__(self, object key, object value):
 */
  /*else*/ {
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Unknown_string_variable, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 534, __pyx_L1_error)
  }

  /* "cexprtk/_symbol_table.pyx":525
 *   C++ symbol_table object owned by parent Symbol_Table."""
 * 
 *   def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *     cdef bytes cstr_key = key.encode("ascii")
 *     cdef object strv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr_key);
  __Pyx_XDECREF(__pyx_v_strv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":536
 *       raise KeyError("Unknown string_variable: "+key)
 * 
 *   def __setitem__(self, object key, object value):             # <<<<<<<<<<<<<<
 *     cdef int rv
 *     cdef string strkey
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_3__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_3__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_2__setitem__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_2__setitem__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  int __pyx_v_rv;
  std::string __pyx_v_strkey;
  PyObject *__pyx_v_varkey = NULL;
  __pyx_t_6exprtk_stringvar_ptr __pyx_v_vptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "cexprtk/_symbol_table.pyx":540
 *     cdef string strkey
 *     cdef string var
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")
 */
  __pyx_t_1 = ((!(__pyx_v_self->_csymtableptr != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":541
 *     cdef string var
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")             # <<<<<<<<<<<<<<
 *     strkey = key.encode("ascii")
 *     varkey = value.encode("ascii")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ReferenceError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 541, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":540
 *     cdef string strkey
 *     cdef string var
 *     if not self._csymtableptr:             # <<<<<<<<<<<<<<
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")
 */
  }

  /* "cexprtk/_symbol_table.pyx":542
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     varkey = value.encode("ascii")
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_strkey = __pyx_t_5;

  /* "cexprtk/_symbol_table.pyx":543
 *       raise ReferenceError("Parent Symbol_Table no longer exists")
 *     strkey = key.encode("ascii")
 *     varkey = value.encode("ascii")             # <<<<<<<<<<<<<<
 * 
 *     if self._functions.has_key(key):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_varkey = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":545
 *     varkey = value.encode("ascii")
 * 
 *     if self._functions.has_key(key):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set string variable because a function already exists with the same name: "+key)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_functions, __pyx_n_s_has_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":546
 * 
 *     if self._functions.has_key(key):
 *       raise KeyError("Cannot set string variable because a function already exists with the same name: "+key)             # <<<<<<<<<<<<<<
 * 
 *     if is_constant(strkey, self._csymtableptr):
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_Cannot_set_string_variable_becau, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 546, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":545
 *     varkey = value.encode("ascii")
 * 
 *     if self._functions.has_key(key):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set string variable because a function already exists with the same name: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":548
 *       raise KeyError("Cannot set string variable because a function already exists with the same name: "+key)
 * 
 *     if is_constant(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set string variable because a constant already exists with the same name: "+key)
 * 
 */
  __pyx_t_1 = (__pyx_f_7cexprtk_13_symbol_table_is_constant(__pyx_v_strkey, __pyx_v_self->_csymtableptr) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":549
 * 
 *     if is_constant(strkey, self._csymtableptr):
 *       raise KeyError("Cannot set string variable because a constant already exists with the same name: "+key)             # <<<<<<<<<<<<<<
 * 
 *     if is_variable(strkey, self._csymtableptr):
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_u_Cannot_set_string_variable_becau_2, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 549, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":548
 *       raise KeyError("Cannot set string variable because a function already exists with the same name: "+key)
 * 
 *     if is_constant(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set string variable because a constant already exists with the same name: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":551
 *       raise KeyError("Cannot set string variable because a constant already exists with the same name: "+key)
 * 
 *     if is_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set string variable because a variable already exists with the same name: "+key)
 * 
 */
  __pyx_t_1 = (__pyx_f_7cexprtk_13_symbol_table_is_variable(__pyx_v_strkey, __pyx_v_self->_csymtableptr) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":552
 * 
 *     if is_variable(strkey, self._csymtableptr):
 *       raise KeyError("Cannot set string variable because a variable already exists with the same name: "+key)             # <<<<<<<<<<<<<<
 * 
 *     cdef exprtk.stringvar_ptr vptr = self._csymtableptr[0].get_stringvar(strkey)
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_Cannot_set_string_variable_becau_3, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 552, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":551
 *       raise KeyError("Cannot set string variable because a constant already exists with the same name: "+key)
 * 
 *     if is_variable(strkey, self._csymtableptr):             # <<<<<<<<<<<<<<
 *       raise KeyError("Cannot set string variable because a variable already exists with the same name: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":554
 *       raise KeyError("Cannot set string variable because a variable already exists with the same name: "+key)
 * 
 *     cdef exprtk.stringvar_ptr vptr = self._csymtableptr[0].get_stringvar(strkey)             # <<<<<<<<<<<<<<
 *     if vptr == NULL:
 *       rv = self._csymtableptr[0].create_stringvar(strkey, varkey)
 */
  __pyx_v_vptr = (__pyx_v_self->_csymtableptr[0]).get_stringvar(__pyx_v_strkey);

  /* "cexprtk/_symbol_table.pyx":555
 * 
 *     cdef exprtk.stringvar_ptr vptr = self._csymtableptr[0].get_stringvar(strkey)
 *     if vptr == NULL:             # <<<<<<<<<<<<<<
 *       rv = self._csymtableptr[0].create_stringvar(strkey, varkey)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_vptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "cexprtk/_symbol_table.pyx":556
 *     cdef exprtk.stringvar_ptr vptr = self._csymtableptr[0].get_stringvar(strkey)
 *     if vptr == NULL:
 *       rv = self._csymtableptr[0].create_stringvar(strkey, varkey)             # <<<<<<<<<<<<<<
 *     else:
 *       rv = cexprtk_util.stringVariableAssign(self._csymtableptr[0], strkey, varkey)
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_varkey); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L1_error)
    __pyx_v_rv = (__pyx_v_self->_csymtableptr[0]).create_stringvar(__pyx_v_strkey, __pyx_t_5);

    /* "cexprtk/_symbol_table.pyx":555
 * 
 *     cdef exprtk.stringvar_ptr vptr = self._csymtableptr[0].get_stringvar(strkey)
 *     if vptr == NULL:             # <<<<<<<<<<<<<<
 *       rv = self._csymtableptr[0].create_stringvar(strkey, varkey)
 *     else:
 */
    goto __pyx_L7;
  }

  /* "cexprtk/_symbol_table.pyx":558
 *       rv = self._csymtableptr[0].create_stringvar(strkey, varkey)
 *     else:
 *       rv = cexprtk_util.stringVariableAssign(self._csymtableptr[0], strkey, varkey)             # <<<<<<<<<<<<<<
 * 
 *     if not rv:
 */
  /*else*/ {
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_varkey); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L1_error)
    __pyx_v_rv = stringVariableAssign((__pyx_v_self->_csymtableptr[0]), __pyx_v_strkey, __pyx_t_5);
  }
  __pyx_L7:;

  /* "cexprtk/_symbol_table.pyx":560
 *       rv = cexprtk_util.stringVariableAssign(self._csymtableptr[0], strkey, varkey)
 * 
 *     if not rv:             # <<<<<<<<<<<<<<
 *       raise KeyError("Unknown variable: "+key)
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_rv != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cexprtk/_symbol_table.pyx":561
 * 
 *     if not rv:
 *       raise KeyError("Unknown variable: "+key)             # <<<<<<<<<<<<<<
 * 
 *   def __iter__(self):
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_u_Unknown_variable, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 561, __pyx_L1_error)

    /* "cexprtk/_symbol_table.pyx":560
 *       rv = cexprtk_util.stringVariableAssign(self._csymtableptr[0], strkey, varkey)
 * 
 *     if not rv:             # <<<<<<<<<<<<<<
 *       raise KeyError("Unknown variable: "+key)
 * 
 */
  }

  /* "cexprtk/_symbol_table.pyx":536
 *       raise KeyError("Unknown string_variable: "+key)
 * 
 *   def __setitem__(self, object key, object value):             # <<<<<<<<<<<<<<
 *     cdef int rv
 *     cdef string strkey
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_varkey);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":563
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_4__iter__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_4__iter__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "cexprtk/_symbol_table.pyx":564
 * 
 *   def __iter__(self):
 *     return self.iterkeys()             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":563
 *       raise KeyError("Unknown variable: "+key)
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self.iterkeys()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":566
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return len(self.items())
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_6__len__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_6__len__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "cexprtk/_symbol_table.pyx":567
 * 
 *   def __len__(self):
 *     return len(self.items())             # <<<<<<<<<<<<<<
 * 
 *   cpdef list items(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 567, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":566
 *     return self.iterkeys()
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return len(self.items())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":569
 *     return len(self.items())
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     cdef object strk
 *     cdef object strv
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_strk = 0;
  PyObject *__pyx_v_strv = 0;
  PyObject *__pyx_v_retlist = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  std::string __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_9items)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 569, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 569, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":572
 *     cdef object strk
 *     cdef object strv
 *     cdef list retlist = []             # <<<<<<<<<<<<<<
 * 
 *     for (k,v) in self._get_variable_list():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retlist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":574
 *     cdef list retlist = []
 * 
 *     for (k,v) in self._get_variable_list():             # <<<<<<<<<<<<<<
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self->__pyx_vtab)->_get_variable_list(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 574, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 574, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 574, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cexprtk/_symbol_table.pyx":575
 * 
 *     for (k,v) in self._get_variable_list():
 *       if not self._csymtableptr.is_constant_node(k):             # <<<<<<<<<<<<<<
 *         strk = k.decode("ascii")
 *         strv = v.decode("ascii")
 */
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_k); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L1_error)
    __pyx_t_9 = ((!(__pyx_v_self->_csymtableptr->is_constant_node(__pyx_t_8) != 0)) != 0);
    if (__pyx_t_9) {

      /* "cexprtk/_symbol_table.pyx":576
 *     for (k,v) in self._get_variable_list():
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")             # <<<<<<<<<<<<<<
 *         strv = v.decode("ascii")
 *         retlist.append((strk, strv))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_k, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_ascii);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_strk, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":577
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 *         strv = v.decode("ascii")             # <<<<<<<<<<<<<<
 *         retlist.append((strk, strv))
 *     return retlist
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_ascii);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_strv, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":578
 *         strk = k.decode("ascii")
 *         strv = v.decode("ascii")
 *         retlist.append((strk, strv))             # <<<<<<<<<<<<<<
 *     return retlist
 * 
 */
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_strk);
      __Pyx_GIVEREF(__pyx_v_strk);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_strk);
      __Pyx_INCREF(__pyx_v_strv);
      __Pyx_GIVEREF(__pyx_v_strv);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_strv);
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_retlist, __pyx_t_1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 578, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":575
 * 
 *     for (k,v) in self._get_variable_list():
 *       if not self._csymtableptr.is_constant_node(k):             # <<<<<<<<<<<<<<
 *         strk = k.decode("ascii")
 *         strv = v.decode("ascii")
 */
    }

    /* "cexprtk/_symbol_table.pyx":574
 *     cdef list retlist = []
 * 
 *     for (k,v) in self._get_variable_list():             # <<<<<<<<<<<<<<
 *       if not self._csymtableptr.is_constant_node(k):
 *         strk = k.decode("ascii")
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":579
 *         strv = v.decode("ascii")
 *         retlist.append((strk, strv))
 *     return retlist             # <<<<<<<<<<<<<<
 * 
 *   def iteritems(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retlist);
  __pyx_r = __pyx_v_retlist;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":569
 *     return len(self.items())
 * 
 *   cpdef list items(self):             # <<<<<<<<<<<<<<
 *     cdef object strk
 *     cdef object strv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strk);
  __Pyx_XDECREF(__pyx_v_strv);
  __Pyx_XDECREF(__pyx_v_retlist);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_8items(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_8items(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_items(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":581
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_11iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_11iteritems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iteritems (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_10iteritems(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_10iteritems(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iteritems", 0);

  /* "cexprtk/_symbol_table.pyx":582
 * 
 *   def iteritems(self):
 *     return iter(self.items())             # <<<<<<<<<<<<<<
 * 
 *   def iterkeys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":581
 *     return retlist
 * 
 *   def iteritems(self):             # <<<<<<<<<<<<<<
 *     return iter(self.items())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.iteritems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":584
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_13iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_13iterkeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterkeys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_12iterkeys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_12iterkeys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterkeys", 0);

  /* "cexprtk/_symbol_table.pyx":585
 * 
 *   def iterkeys(self):
 *     return iter(self.keys())             # <<<<<<<<<<<<<<
 * 
 *   def itervalues(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":584
 *     return iter(self.items())
 * 
 *   def iterkeys(self):             # <<<<<<<<<<<<<<
 *     return iter(self.keys())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.iterkeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":587
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_15itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_15itervalues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervalues (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_14itervalues(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_14itervalues(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("itervalues", 0);

  /* "cexprtk/_symbol_table.pyx":588
 * 
 *   def itervalues(self):
 *     return iter(self.values())             # <<<<<<<<<<<<<<
 * 
 *   def keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":587
 *     return iter(self.keys())
 * 
 *   def itervalues(self):             # <<<<<<<<<<<<<<
 *     return iter(self.values())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.itervalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":590
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_17keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_17keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_16keys(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_16keys(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  PyObject *__pyx_9genexpr10__pyx_v_k = NULL;
  CYTHON_UNUSED PyObject *__pyx_9genexpr10__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys", 0);

  /* "cexprtk/_symbol_table.pyx":591
 * 
 *   def keys(self):
 *     return [ k for (k,v) in self.items()]             # <<<<<<<<<<<<<<
 * 
 *   def values(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 591, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 591, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 591, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 591, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 591, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 591, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 591, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 591, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_9genexpr10__pyx_v_k))) __PYX_ERR(0, 591, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_k); __pyx_9genexpr10__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_v); __pyx_9genexpr10__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_k); __pyx_9genexpr10__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_v); __pyx_9genexpr10__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":590
 *     return iter(self.values())
 * 
 *   def keys(self):             # <<<<<<<<<<<<<<
 *     return [ k for (k,v) in self.items()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_k);
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":593
 *     return [ k for (k,v) in self.items()]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_19values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_19values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_18values(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_18values(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_9genexpr11__pyx_v_k = NULL;
  PyObject *__pyx_9genexpr11__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);

  /* "cexprtk/_symbol_table.pyx":594
 * 
 *   def values(self):
 *     return [ v for (k,v) in self.items() ]             # <<<<<<<<<<<<<<
 * 
 *   cdef list _get_variable_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self->__pyx_vtab)->items(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 594, __pyx_L5_error)
    }
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 594, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 594, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 594, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 594, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 594, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 594, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_v, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_9genexpr11__pyx_v_v))) __PYX_ERR(0, 594, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_k); __pyx_9genexpr11__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_v); __pyx_9genexpr11__pyx_v_v = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_k); __pyx_9genexpr11__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_v); __pyx_9genexpr11__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":593
 *     return [ k for (k,v) in self.items()]
 * 
 *   def values(self):             # <<<<<<<<<<<<<<
 *     return [ v for (k,v) in self.items() ]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_k);
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":596
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cdef list _get_variable_list(self):             # <<<<<<<<<<<<<<
 *     cdef exprtk.LabelStringPairVector itemvector = exprtk.LabelStringPairVector()
 *     self._csymtableptr.get_stringvar_list(itemvector)
 */

static PyObject *__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables__get_variable_list(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  __pyx_t_6exprtk_LabelStringPairVector __pyx_v_itemvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6exprtk_LabelStringPairVector __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_variable_list", 0);

  /* "cexprtk/_symbol_table.pyx":597
 * 
 *   cdef list _get_variable_list(self):
 *     cdef exprtk.LabelStringPairVector itemvector = exprtk.LabelStringPairVector()             # <<<<<<<<<<<<<<
 *     self._csymtableptr.get_stringvar_list(itemvector)
 *     return itemvector
 */
  try {
    __pyx_t_1 = __pyx_t_6exprtk_LabelStringPairVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 597, __pyx_L1_error)
  }
  __pyx_v_itemvector = __pyx_t_1;

  /* "cexprtk/_symbol_table.pyx":598
 *   cdef list _get_variable_list(self):
 *     cdef exprtk.LabelStringPairVector itemvector = exprtk.LabelStringPairVector()
 *     self._csymtableptr.get_stringvar_list(itemvector)             # <<<<<<<<<<<<<<
 *     return itemvector
 * 
 */
  (void)(__pyx_v_self->_csymtableptr->get_stringvar_list(__pyx_v_itemvector));

  /* "cexprtk/_symbol_table.pyx":599
 *     cdef exprtk.LabelStringPairVector itemvector = exprtk.LabelStringPairVector()
 *     self._csymtableptr.get_stringvar_list(itemvector)
 *     return itemvector             # <<<<<<<<<<<<<<
 * 
 *   cpdef has_key(self, object key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair(__pyx_v_itemvector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 599, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":596
 *     return [ v for (k,v) in self.items() ]
 * 
 *   cdef list _get_variable_list(self):             # <<<<<<<<<<<<<<
 *     cdef exprtk.LabelStringPairVector itemvector = exprtk.LabelStringPairVector()
 *     self._csymtableptr.get_stringvar_list(itemvector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables._get_variable_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":601
 *     return itemvector
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     try:
 *       key = str(key)
 */

static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_21has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_cstr_key = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  __Pyx_INCREF(__pyx_v_key);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_21has_key)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cexprtk/_symbol_table.pyx":602
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "cexprtk/_symbol_table.pyx":603
 *   cpdef has_key(self, object key):
 *     try:
 *       key = str(key)             # <<<<<<<<<<<<<<
 *     except ValueError:
 *       return False
 */
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cexprtk/_symbol_table.pyx":602
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cexprtk/_symbol_table.pyx":604
 *     try:
 *       key = str(key)
 *     except ValueError:             # <<<<<<<<<<<<<<
 *       return False
 * 
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 604, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);

      /* "cexprtk/_symbol_table.pyx":605
 *       key = str(key)
 *     except ValueError:
 *       return False             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes cstr_key = key.encode("ascii")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "cexprtk/_symbol_table.pyx":602
 * 
 *   cpdef has_key(self, object key):
 *     try:             # <<<<<<<<<<<<<<
 *       key = str(key)
 *     except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "cexprtk/_symbol_table.pyx":607
 *       return False
 * 
 *     cdef bytes cstr_key = key.encode("ascii")             # <<<<<<<<<<<<<<
 *     return is_string_variable(cstr_key, self._csymtableptr)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 607, __pyx_L1_error)
  __pyx_v_cstr_key = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cexprtk/_symbol_table.pyx":608
 * 
 *     cdef bytes cstr_key = key.encode("ascii")
 *     return is_string_variable(cstr_key, self._csymtableptr)             # <<<<<<<<<<<<<<
 * 
 *   def __contains__(self, object key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cstr_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_f_7cexprtk_13_symbol_table_is_string_variable(__pyx_t_9, __pyx_v_self->_csymtableptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":601
 *     return itemvector
 * 
 *   cpdef has_key(self, object key):             # <<<<<<<<<<<<<<
 *     try:
 *       key = str(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cstr_key);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_21has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_21has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_20has_key(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_20has_key(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_has_key(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cexprtk/_symbol_table.pyx":610
 *     return is_string_variable(cstr_key, self._csymtableptr)
 * 
 *   def __contains__(self, object key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 */

/* Python wrapper */
static int __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_23__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_23__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_22__contains__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_22__contains__(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "cexprtk/_symbol_table.pyx":611
 * 
 *   def __contains__(self, object key):
 *     return self.has_key(key)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self->__pyx_vtab)->has_key(__pyx_v_self, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cexprtk/_symbol_table.pyx":610
 *     return is_string_variable(cstr_key, self._csymtableptr)
 * 
 *   def __contains__(self, object key):             # <<<<<<<<<<<<<<
 *     return self.has_key(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_24__reduce_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_26__setstate_cython__(((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cexprtk._symbol_table._Symbol_Table_String_Variables.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____double")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____double(std::pair<std::string,double>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_string____double", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____double")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____double(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____double")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_string____double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair(const std::vector<__pyx_t_6exprtk_LabelFloatPair>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_std_3a__3a_string____double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelFloatPair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(std::pair<std::string,std::string>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair(const std::vector<__pyx_t_6exprtk_LabelStringPair>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Variables __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Variables;

static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Variables(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Variables;
  p->_functions = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_Variables(PyObject *o) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  Py_CLEAR(p->_functions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cexprtk_13_symbol_table__Symbol_Table_Variables(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)o;
  if (p->_functions) {
    e = (*v)(p->_functions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cexprtk_13_symbol_table__Symbol_Table_Variables(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)o;
  tmp = ((PyObject*)p->_functions);
  p->_functions = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_Variables(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7cexprtk_13_symbol_table__Symbol_Table_Variables(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_3__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_Variables[] = {
  {"items", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_9items, METH_NOARGS, 0},
  {"iteritems", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_11iteritems, METH_NOARGS, 0},
  {"iterkeys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_13iterkeys, METH_NOARGS, 0},
  {"itervalues", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_15itervalues, METH_NOARGS, 0},
  {"keys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_17keys, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_19values, METH_NOARGS, 0},
  {"has_key", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_21has_key, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Symbol_Table_Variables = {
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_Variables, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_23__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Symbol_Table_Variables = {
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_7__len__, /*mp_length*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_1__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7cexprtk_13_symbol_table__Symbol_Table_Variables, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables = {
  PyVarObject_HEAD_INIT(0, 0)
  "cexprtk._symbol_table._Symbol_Table_Variables", /*tp_name*/
  sizeof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_Variables, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Symbol_Table_Variables, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Symbol_Table_Variables, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Class providing the .variables property for Symbol_Table.\n\n  Provides a dictionary like interface, methods pass-through to\n  C++ symbol_table object owned by parent Symbol_Table.", /*tp_doc*/
  __pyx_tp_traverse_7cexprtk_13_symbol_table__Symbol_Table_Variables, /*tp_traverse*/
  __pyx_tp_clear_7cexprtk_13_symbol_table__Symbol_Table_Variables, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_Variables, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Variables, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Constants __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Constants;

static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Constants(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Constants;
  return o;
}

static void __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_Constants(PyObject *o) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_Constants(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_Constants[] = {
  {"items", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_7items, METH_NOARGS, 0},
  {"iteritems", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_9iteritems, METH_NOARGS, 0},
  {"iterkeys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_11iterkeys, METH_NOARGS, 0},
  {"itervalues", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_13itervalues, METH_NOARGS, 0},
  {"keys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_15keys, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_17values, METH_NOARGS, 0},
  {"has_key", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_19has_key, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Symbol_Table_Constants = {
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_Constants, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_21__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Symbol_Table_Constants = {
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_5__len__, /*mp_length*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_1__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants = {
  PyVarObject_HEAD_INIT(0, 0)
  "cexprtk._symbol_table._Symbol_Table_Constants", /*tp_name*/
  sizeof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_Constants, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Symbol_Table_Constants, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Symbol_Table_Constants, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Class providing the .constants property for Symbol_Table.\n\n  Provides a dictionary like interface, methods pass-through to\n  C++ symbol_table object owned by parent Symbol_Table.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_Constants, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Constants, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_Functions __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions;

static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Functions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Functions;
  p->_reservedFunctions = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_Functions(PyObject *o) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  Py_CLEAR(p->_reservedFunctions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cexprtk_13_symbol_table__Symbol_Table_Functions(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)o;
  if (p->_reservedFunctions) {
    e = (*v)(p->_reservedFunctions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cexprtk_13_symbol_table__Symbol_Table_Functions(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)o;
  tmp = ((PyObject*)p->_reservedFunctions);
  p->_reservedFunctions = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_Functions(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7cexprtk_13_symbol_table__Symbol_Table_Functions(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_11__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_Functions[] = {
  {"_checkFunction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_5_checkFunction, METH_VARARGS|METH_KEYWORDS, 0},
  {"items", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_17items, METH_NOARGS, 0},
  {"iteritems", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_19iteritems, METH_NOARGS, 0},
  {"iterkeys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_21iterkeys, METH_NOARGS, 0},
  {"itervalues", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_23itervalues, METH_NOARGS, 0},
  {"keys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_25keys, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_27values, METH_NOARGS, 0},
  {"has_key", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_29has_key, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_33__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_35__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Symbol_Table_Functions = {
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_15__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_Functions, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_31__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Symbol_Table_Functions = {
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_15__len__, /*mp_length*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_9__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7cexprtk_13_symbol_table__Symbol_Table_Functions, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions = {
  PyVarObject_HEAD_INIT(0, 0)
  "cexprtk._symbol_table._Symbol_Table_Functions", /*tp_name*/
  sizeof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_Functions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Symbol_Table_Functions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Symbol_Table_Functions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Class providing the .functions property for Symbol_Table.\n\n  Provides a dictionary like interface, methods pass-through to\n  C++ symbol_table object owned by parent Symbol_Table.", /*tp_doc*/
  __pyx_tp_traverse_7cexprtk_13_symbol_table__Symbol_Table_Functions, /*tp_traverse*/
  __pyx_tp_clear_7cexprtk_13_symbol_table__Symbol_Table_Functions, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_13__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_Functions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_Functions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7cexprtk_13_symbol_table__Symbol_Table_String_Variables __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_String_Variables;

static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_String_Variables(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_String_Variables;
  p->_functions = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_String_Variables(PyObject *o) {
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  Py_CLEAR(p->_functions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cexprtk_13_symbol_table__Symbol_Table_String_Variables(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)o;
  if (p->_functions) {
    e = (*v)(p->_functions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cexprtk_13_symbol_table__Symbol_Table_String_Variables(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *p = (struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)o;
  tmp = ((PyObject*)p->_functions);
  p->_functions = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_String_Variables(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7cexprtk_13_symbol_table__Symbol_Table_String_Variables(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_3__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_String_Variables[] = {
  {"items", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_9items, METH_NOARGS, 0},
  {"iteritems", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_11iteritems, METH_NOARGS, 0},
  {"iterkeys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_13iterkeys, METH_NOARGS, 0},
  {"itervalues", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_15itervalues, METH_NOARGS, 0},
  {"keys", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_17keys, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_19values, METH_NOARGS, 0},
  {"has_key", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_21has_key, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Symbol_Table_String_Variables = {
  __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_23__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Symbol_Table_String_Variables = {
  __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_7__len__, /*mp_length*/
  __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_1__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables = {
  PyVarObject_HEAD_INIT(0, 0)
  "cexprtk._symbol_table._Symbol_Table_String_Variables", /*tp_name*/
  sizeof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Symbol_Table_String_Variables, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Symbol_Table_String_Variables, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Class providing the .string_variables property for Symbol_Table.\n\n  Provides a dictionary like interface, methods pass-through to\n  C++ symbol_table object owned by parent Symbol_Table.", /*tp_doc*/
  __pyx_tp_traverse_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, /*tp_traverse*/
  __pyx_tp_clear_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_7cexprtk_13_symbol_table_Symbol_Table(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)o);
  p->_variables = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)Py_None); Py_INCREF(Py_None);
  p->_constants = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)Py_None); Py_INCREF(Py_None);
  p->_functions = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)Py_None); Py_INCREF(Py_None);
  p->_string_variables = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cexprtk_13_symbol_table_Symbol_Table(PyObject *o) {
  struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *p = (struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_variables);
  Py_CLEAR(p->_constants);
  Py_CLEAR(p->_functions);
  Py_CLEAR(p->_string_variables);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cexprtk_13_symbol_table_Symbol_Table(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *p = (struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)o;
  if (p->_variables) {
    e = (*v)(((PyObject *)p->_variables), a); if (e) return e;
  }
  if (p->_constants) {
    e = (*v)(((PyObject *)p->_constants), a); if (e) return e;
  }
  if (p->_functions) {
    e = (*v)(((PyObject *)p->_functions), a); if (e) return e;
  }
  if (p->_string_variables) {
    e = (*v)(((PyObject *)p->_string_variables), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cexprtk_13_symbol_table_Symbol_Table(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *p = (struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table *)o;
  tmp = ((PyObject*)p->_variables);
  p->_variables = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_constants);
  p->_constants = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_functions);
  p->_functions = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_string_variables);
  p->_string_variables = ((struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_functions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9functions_1__get__(o);
}

static PyObject *__pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_variables(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9variables_1__get__(o);
}

static PyObject *__pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_constants(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9constants_1__get__(o);
}

static PyObject *__pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_string_variables(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_16string_variables_1__get__(o);
}

static PyMethodDef __pyx_methods_7cexprtk_13_symbol_table_Symbol_Table[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_1__reduce__, METH_NOARGS, 0},
  {"_populateVariables", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_9_populateVariables, METH_O, 0},
  {"_populateConstants", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_11_populateConstants, METH_VARARGS|METH_KEYWORDS, 0},
  {"_populateFunctions", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_13_populateFunctions, METH_O, 0},
  {"_populateStringVariables", (PyCFunction)__pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_15_populateStringVariables, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cexprtk_13_symbol_table_Symbol_Table[] = {
  {(char *)"functions", __pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_functions, 0, (char *)0, 0},
  {(char *)"variables", __pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_variables, 0, (char *)0, 0},
  {(char *)"constants", __pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_constants, 0, (char *)0, 0},
  {(char *)"string_variables", __pyx_getprop_7cexprtk_13_symbol_table_12Symbol_Table_string_variables, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cexprtk_13_symbol_table_Symbol_Table = {
  PyVarObject_HEAD_INIT(0, 0)
  "cexprtk._symbol_table.Symbol_Table", /*tp_name*/
  sizeof(struct __pyx_obj_7cexprtk_13_symbol_table_Symbol_Table), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cexprtk_13_symbol_table_Symbol_Table, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Class for providing variable and constant values to Expression instances.", /*tp_doc*/
  __pyx_tp_traverse_7cexprtk_13_symbol_table_Symbol_Table, /*tp_traverse*/
  __pyx_tp_clear_7cexprtk_13_symbol_table_Symbol_Table, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cexprtk_13_symbol_table_Symbol_Table, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cexprtk_13_symbol_table_Symbol_Table, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7cexprtk_13_symbol_table_12Symbol_Table_7__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cexprtk_13_symbol_table_Symbol_Table, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__symbol_table(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__symbol_table},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_symbol_table",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_BadVariableException, __pyx_k_BadVariableException, sizeof(__pyx_k_BadVariableException), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_set_string_variable_becau, __pyx_k_Cannot_set_string_variable_becau, sizeof(__pyx_k_Cannot_set_string_variable_becau), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_set_string_variable_becau_2, __pyx_k_Cannot_set_string_variable_becau_2, sizeof(__pyx_k_Cannot_set_string_variable_becau_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_set_string_variable_becau_3, __pyx_k_Cannot_set_string_variable_becau_3, sizeof(__pyx_k_Cannot_set_string_variable_becau_3), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_set_variable_because_a_co, __pyx_k_Cannot_set_variable_because_a_co, sizeof(__pyx_k_Cannot_set_variable_because_a_co), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_set_variable_because_a_fu, __pyx_k_Cannot_set_variable_because_a_fu, sizeof(__pyx_k_Cannot_set_variable_because_a_fu), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_set_variable_because_a_st, __pyx_k_Cannot_set_variable_because_a_st, sizeof(__pyx_k_Cannot_set_variable_because_a_st), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_creating_constant_named, __pyx_k_Error_creating_constant_named, sizeof(__pyx_k_Error_creating_constant_named), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_creating_variable_named, __pyx_k_Error_creating_variable_named, sizeof(__pyx_k_Error_creating_variable_named), 0, 1, 0, 0},
  {&__pyx_kp_u_Function, __pyx_k_Function, sizeof(__pyx_k_Function), 0, 1, 0, 0},
  {&__pyx_kp_u_Function_cannot_be_set_because_a, __pyx_k_Function_cannot_be_set_because_a, sizeof(__pyx_k_Function_cannot_be_set_because_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Function_cannot_be_set_because_a_2, __pyx_k_Function_cannot_be_set_because_a_2, sizeof(__pyx_k_Function_cannot_be_set_because_a_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Function_cannot_be_set_because_a_3, __pyx_k_Function_cannot_be_set_because_a_3, sizeof(__pyx_k_Function_cannot_be_set_because_a_3), 0, 1, 0, 0},
  {&__pyx_kp_u_Function_has_same_name_as_a_buil, __pyx_k_Function_has_same_name_as_a_buil, sizeof(__pyx_k_Function_has_same_name_as_a_buil), 0, 1, 0, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_NameShadowException, __pyx_k_NameShadowException, sizeof(__pyx_k_NameShadowException), 0, 0, 1, 1},
  {&__pyx_kp_u_Only_functions_with_20_or_fewer, __pyx_k_Only_functions_with_20_or_fewer, sizeof(__pyx_k_Only_functions_with_20_or_fewer), 0, 1, 0, 0},
  {&__pyx_kp_u_Parent_Symbol_Table_no_longer_ex, __pyx_k_Parent_Symbol_Table_no_longer_ex, sizeof(__pyx_k_Parent_Symbol_Table_no_longer_ex), 0, 1, 0, 0},
  {&__pyx_n_s_ReferenceError, __pyx_k_ReferenceError, sizeof(__pyx_k_ReferenceError), 0, 0, 1, 1},
  {&__pyx_n_s_ReservedFunctionShadowException, __pyx_k_ReservedFunctionShadowException, sizeof(__pyx_k_ReservedFunctionShadowException), 0, 0, 1, 1},
  {&__pyx_n_s_Symbol_Table, __pyx_k_Symbol_Table, sizeof(__pyx_k_Symbol_Table), 0, 0, 1, 1},
  {&__pyx_n_s_Symbol_Table_Constants, __pyx_k_Symbol_Table_Constants, sizeof(__pyx_k_Symbol_Table_Constants), 0, 0, 1, 1},
  {&__pyx_n_s_Symbol_Table_Functions, __pyx_k_Symbol_Table_Functions, sizeof(__pyx_k_Symbol_Table_Functions), 0, 0, 1, 1},
  {&__pyx_n_s_Symbol_Table_String_Variables, __pyx_k_Symbol_Table_String_Variables, sizeof(__pyx_k_Symbol_Table_String_Variables), 0, 0, 1, 1},
  {&__pyx_n_s_Symbol_Table_Variables, __pyx_k_Symbol_Table_Variables, sizeof(__pyx_k_Symbol_Table_Variables), 0, 0, 1, 1},
  {&__pyx_kp_u_The_following_constant_names_are, __pyx_k_The_following_constant_names_are, sizeof(__pyx_k_The_following_constant_names_are), 0, 1, 0, 0},
  {&__pyx_kp_u_The_following_function_names_are, __pyx_k_The_following_function_names_are, sizeof(__pyx_k_The_following_function_names_are), 0, 1, 0, 0},
  {&__pyx_kp_u_The_following_string_variable_na, __pyx_k_The_following_string_variable_na, sizeof(__pyx_k_The_following_string_variable_na), 0, 1, 0, 0},
  {&__pyx_kp_u_The_following_variable_names_are, __pyx_k_The_following_variable_names_are, sizeof(__pyx_k_The_following_variable_names_are), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Unknown_function, __pyx_k_Unknown_function, sizeof(__pyx_k_Unknown_function), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_string_variable, __pyx_k_Unknown_string_variable, sizeof(__pyx_k_Unknown_string_variable), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_variable, __pyx_k_Unknown_variable, sizeof(__pyx_k_Unknown_variable), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VariableNameShadowException, __pyx_k_VariableNameShadowException, sizeof(__pyx_k_VariableNameShadowException), 0, 0, 1, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_n_u_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 1, 0, 1},
  {&__pyx_n_u_acos, __pyx_k_acos, sizeof(__pyx_k_acos), 0, 1, 0, 1},
  {&__pyx_n_u_acosh, __pyx_k_acosh, sizeof(__pyx_k_acosh), 0, 1, 0, 1},
  {&__pyx_n_s_add_constants, __pyx_k_add_constants, sizeof(__pyx_k_add_constants), 0, 0, 1, 1},
  {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
  {&__pyx_n_u_asin, __pyx_k_asin, sizeof(__pyx_k_asin), 0, 1, 0, 1},
  {&__pyx_n_u_asinh, __pyx_k_asinh, sizeof(__pyx_k_asinh), 0, 1, 0, 1},
  {&__pyx_n_u_atan, __pyx_k_atan, sizeof(__pyx_k_atan), 0, 1, 0, 1},
  {&__pyx_n_u_atan2, __pyx_k_atan2, sizeof(__pyx_k_atan2), 0, 1, 0, 1},
  {&__pyx_n_u_atanh, __pyx_k_atanh, sizeof(__pyx_k_atanh), 0, 1, 0, 1},
  {&__pyx_n_u_avg, __pyx_k_avg, sizeof(__pyx_k_avg), 0, 1, 0, 1},
  {&__pyx_n_u_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 1, 0, 1},
  {&__pyx_n_s_checkFunction, __pyx_k_checkFunction, sizeof(__pyx_k_checkFunction), 0, 0, 1, 1},
  {&__pyx_n_u_clamp, __pyx_k_clamp, sizeof(__pyx_k_clamp), 0, 1, 0, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_constants, __pyx_k_constants, sizeof(__pyx_k_constants), 0, 0, 1, 1},
  {&__pyx_n_u_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 1, 0, 1},
  {&__pyx_n_u_cosh, __pyx_k_cosh, sizeof(__pyx_k_cosh), 0, 1, 0, 1},
  {&__pyx_n_u_cot, __pyx_k_cot, sizeof(__pyx_k_cot), 0, 1, 0, 1},
  {&__pyx_n_u_csc, __pyx_k_csc, sizeof(__pyx_k_csc), 0, 1, 0, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_u_deg2grad, __pyx_k_deg2grad, sizeof(__pyx_k_deg2grad), 0, 1, 0, 1},
  {&__pyx_n_u_deg2rad, __pyx_k_deg2rad, sizeof(__pyx_k_deg2rad), 0, 1, 0, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_u_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 1, 0, 1},
  {&__pyx_n_u_erf, __pyx_k_erf, sizeof(__pyx_k_erf), 0, 1, 0, 1},
  {&__pyx_n_u_erfc, __pyx_k_erfc, sizeof(__pyx_k_erfc), 0, 1, 0, 1},
  {&__pyx_n_s_exceptions, __pyx_k_exceptions, sizeof(__pyx_k_exceptions), 0, 0, 1, 1},
  {&__pyx_n_u_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 1, 0, 1},
  {&__pyx_n_u_expm1, __pyx_k_expm1, sizeof(__pyx_k_expm1), 0, 1, 0, 1},
  {&__pyx_n_u_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 1, 0, 1},
  {&__pyx_n_u_frac, __pyx_k_frac, sizeof(__pyx_k_frac), 0, 1, 0, 1},
  {&__pyx_n_s_function, __pyx_k_function, sizeof(__pyx_k_function), 0, 0, 1, 1},
  {&__pyx_n_s_functionargs, __pyx_k_functionargs, sizeof(__pyx_k_functionargs), 0, 0, 1, 1},
  {&__pyx_n_s_functionargs_2, __pyx_k_functionargs_2, sizeof(__pyx_k_functionargs_2), 0, 0, 1, 1},
  {&__pyx_n_s_functions, __pyx_k_functions, sizeof(__pyx_k_functions), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_u_grad2deg, __pyx_k_grad2deg, sizeof(__pyx_k_grad2deg), 0, 1, 0, 1},
  {&__pyx_n_s_has_key, __pyx_k_has_key, sizeof(__pyx_k_has_key), 0, 0, 1, 1},
  {&__pyx_n_u_hypot, __pyx_k_hypot, sizeof(__pyx_k_hypot), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_iterkeys, __pyx_k_iterkeys, sizeof(__pyx_k_iterkeys), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_u_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 1, 0, 1},
  {&__pyx_n_u_log10, __pyx_k_log10, sizeof(__pyx_k_log10), 0, 1, 0, 1},
  {&__pyx_n_u_log1p, __pyx_k_log1p, sizeof(__pyx_k_log1p), 0, 1, 0, 1},
  {&__pyx_n_u_log2, __pyx_k_log2, sizeof(__pyx_k_log2), 0, 1, 0, 1},
  {&__pyx_n_u_logn, __pyx_k_logn, sizeof(__pyx_k_logn), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_u_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 1, 0, 1},
  {&__pyx_n_u_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 1, 0, 1},
  {&__pyx_n_u_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 1, 0, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_u_ncdf, __pyx_k_ncdf, sizeof(__pyx_k_ncdf), 0, 1, 0, 1},
  {&__pyx_n_u_nequal, __pyx_k_nequal, sizeof(__pyx_k_nequal), 0, 1, 0, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_populateConstants, __pyx_k_populateConstants, sizeof(__pyx_k_populateConstants), 0, 0, 1, 1},
  {&__pyx_n_s_populateFunctions, __pyx_k_populateFunctions, sizeof(__pyx_k_populateFunctions), 0, 0, 1, 1},
  {&__pyx_n_s_populateStringVariables, __pyx_k_populateStringVariables, sizeof(__pyx_k_populateStringVariables), 0, 0, 1, 1},
  {&__pyx_n_s_populateVariables, __pyx_k_populateVariables, sizeof(__pyx_k_populateVariables), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_u_rad2deg, __pyx_k_rad2deg, sizeof(__pyx_k_rad2deg), 0, 1, 0, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_u_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 1, 0, 1},
  {&__pyx_n_u_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 1, 0, 1},
  {&__pyx_n_u_roundn, __pyx_k_roundn, sizeof(__pyx_k_roundn), 0, 1, 0, 1},
  {&__pyx_n_u_sec, __pyx_k_sec, sizeof(__pyx_k_sec), 0, 1, 0, 1},
  {&__pyx_kp_s_self__csymtableptr_cannot_be_con, __pyx_k_self__csymtableptr_cannot_be_con, sizeof(__pyx_k_self__csymtableptr_cannot_be_con), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_u_sgn, __pyx_k_sgn, sizeof(__pyx_k_sgn), 0, 1, 0, 1},
  {&__pyx_n_u_sin, __pyx_k_sin, sizeof(__pyx_k_sin), 0, 1, 0, 1},
  {&__pyx_n_u_sinc, __pyx_k_sinc, sizeof(__pyx_k_sinc), 0, 1, 0, 1},
  {&__pyx_n_u_sinh, __pyx_k_sinh, sizeof(__pyx_k_sinh), 0, 1, 0, 1},
  {&__pyx_n_u_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 1, 0, 1},
  {&__pyx_n_s_string_variables, __pyx_k_string_variables, sizeof(__pyx_k_string_variables), 0, 0, 1, 1},
  {&__pyx_n_u_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 1, 0, 1},
  {&__pyx_n_u_swap, __pyx_k_swap, sizeof(__pyx_k_swap), 0, 1, 0, 1},
  {&__pyx_n_u_tan, __pyx_k_tan, sizeof(__pyx_k_tan), 0, 1, 0, 1},
  {&__pyx_n_u_tanh, __pyx_k_tanh, sizeof(__pyx_k_tanh), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_u_trunc, __pyx_k_trunc, sizeof(__pyx_k_trunc), 0, 1, 0, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_variables, __pyx_k_variables, sizeof(__pyx_k_variables), 0, 0, 1, 1},
  {&__pyx_kp_u_was_already_in_symbol_table, __pyx_k_was_already_in_symbol_table, sizeof(__pyx_k_was_already_in_symbol_table), 0, 1, 0, 0},
  {&__pyx_kp_u_with_value, __pyx_k_with_value, sizeof(__pyx_k_with_value), 0, 1, 0, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 191, __pyx_L1_error)
  __pyx_builtin_ReferenceError = __Pyx_GetBuiltinName(__pyx_n_s_ReferenceError); if (!__pyx_builtin_ReferenceError) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 61, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cexprtk/_symbol_table.pyx":197
 *     cdef string strkey
 *     if not self._csymtableptr:
 *       raise ReferenceError("Parent Symbol_Table no longer exists")             # <<<<<<<<<<<<<<
 *     strkey = key.encode("ascii")
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Parent_Symbol_Table_no_longer_ex); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self__csymtableptr_cannot_be_con); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self__csymtableptr_cannot_be_con); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self__csymtableptr_cannot_be_con); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self__csymtableptr_cannot_be_con); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self__csymtableptr_cannot_be_con); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._csymtableptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self__csymtableptr_cannot_be_con); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Variables = &__pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Variables;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Variables.items = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_items;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Variables._get_variable_list = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables__get_variable_list;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Variables.has_key = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Variables_has_key;
  if (PyType_Ready(&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables.tp_dictoffset && __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables.tp_dict, __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Variables) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Symbol_Table_Variables, (PyObject *)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  if (__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables.tp_weaklistoffset == 0) __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables.tp_weaklistoffset = offsetof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Variables, __weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Variables = &__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Variables;
  __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Constants = &__pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Constants;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Constants.items = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_items;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Constants._get_variable_list = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants__get_variable_list;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Constants.has_key = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Constants_has_key;
  if (PyType_Ready(&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants) < 0) __PYX_ERR(0, 267, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants.tp_dictoffset && __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants.tp_dict, __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Constants) < 0) __PYX_ERR(0, 267, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Symbol_Table_Constants, (PyObject *)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants) < 0) __PYX_ERR(0, 267, __pyx_L1_error)
  if (__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants.tp_weaklistoffset == 0) __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants.tp_weaklistoffset = offsetof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Constants, __weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants) < 0) __PYX_ERR(0, 267, __pyx_L1_error)
  __pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Constants = &__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Constants;
  __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Functions = &__pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions._getitem = (__pyx_t_24cexprtk_custom_functions_cfunction_ptr (*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, PyObject *))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__getitem;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions._remove_function_from_set = (void (*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, __pyx_t_24cexprtk_custom_functions_cfunction_ptr))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__remove_function_from_set;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions._add_function_to_set = (void (*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, __pyx_t_24cexprtk_custom_functions_cfunction_ptr))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__add_function_to_set;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions._wrapFunction = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, PyObject *, PyObject *, PyObject *, int))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__wrapFunction;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions._resetFunctionExceptions = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__resetFunctionExceptions;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions._checkForException = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions__checkForException;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions.items = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_items;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_Functions.has_key = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_23_Symbol_Table_Functions_has_key;
  if (PyType_Ready(&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions.tp_dictoffset && __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions.tp_dict, __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_Functions) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Symbol_Table_Functions, (PyObject *)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  if (__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions.tp_weaklistoffset == 0) __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions.tp_weaklistoffset = offsetof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_Functions, __weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_Functions = &__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_Functions;
  __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_String_Variables = &__pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_String_Variables;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.items = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_items;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_String_Variables._get_variable_list = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *))__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables__get_variable_list;
  __pyx_vtable_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.has_key = (PyObject *(*)(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7cexprtk_13_symbol_table_30_Symbol_Table_String_Variables_has_key;
  if (PyType_Ready(&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.tp_dictoffset && __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.tp_dict, __pyx_vtabptr_7cexprtk_13_symbol_table__Symbol_Table_String_Variables) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Symbol_Table_String_Variables, (PyObject *)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
  if (__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.tp_weaklistoffset == 0) __pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables.tp_weaklistoffset = offsetof(struct __pyx_obj_7cexprtk_13_symbol_table__Symbol_Table_String_Variables, __weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
  __pyx_ptype_7cexprtk_13_symbol_table__Symbol_Table_String_Variables = &__pyx_type_7cexprtk_13_symbol_table__Symbol_Table_String_Variables;
  if (PyType_Ready(&__pyx_type_7cexprtk_13_symbol_table_Symbol_Table) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cexprtk_13_symbol_table_Symbol_Table.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cexprtk_13_symbol_table_Symbol_Table.tp_dictoffset && __pyx_type_7cexprtk_13_symbol_table_Symbol_Table.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cexprtk_13_symbol_table_Symbol_Table.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7cexprtk_13_symbol_table_Symbol_Table, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 40, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7cexprtk_13_symbol_table_12Symbol_Table_6__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7cexprtk_13_symbol_table_12Symbol_Table_6__init__.doc = __pyx_doc_7cexprtk_13_symbol_table_12Symbol_Table_6__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7cexprtk_13_symbol_table_12Symbol_Table_6__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Symbol_Table, (PyObject *)&__pyx_type_7cexprtk_13_symbol_table_Symbol_Table) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_ptype_7cexprtk_13_symbol_table_Symbol_Table = &__pyx_type_7cexprtk_13_symbol_table_Symbol_Table;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cexprtk._custom_function_callbacks"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "wrapFunction", (void (**)(void))&__pyx_f_7cexprtk_26_custom_function_callbacks_wrapFunction, "CustomFunctionBase *(int, std::string &, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_symbol_table(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_symbol_table(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__symbol_table(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__symbol_table(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__symbol_table(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_symbol_table' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__symbol_table(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_symbol_table", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cexprtk___symbol_table) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cexprtk._symbol_table")) {
      if (unlikely(PyDict_SetItemString(modules, "cexprtk._symbol_table", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cexprtk/_symbol_table.pyx":24
 * from cython.operator cimport dereference as deref, preincrement as inc
 * 
 * from ._functionargs import functionargs             # <<<<<<<<<<<<<<
 * 
 * from ._exceptions import BadVariableException, NameShadowException, VariableNameShadowException, ReservedFunctionShadowException
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_functionargs);
  __Pyx_GIVEREF(__pyx_n_s_functionargs);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_functionargs);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_functionargs_2, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_functionargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functionargs, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cexprtk/_symbol_table.pyx":26
 * from ._functionargs import functionargs
 * 
 * from ._exceptions import BadVariableException, NameShadowException, VariableNameShadowException, ReservedFunctionShadowException             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BadVariableException);
  __Pyx_GIVEREF(__pyx_n_s_BadVariableException);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BadVariableException);
  __Pyx_INCREF(__pyx_n_s_NameShadowException);
  __Pyx_GIVEREF(__pyx_n_s_NameShadowException);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_NameShadowException);
  __Pyx_INCREF(__pyx_n_s_VariableNameShadowException);
  __Pyx_GIVEREF(__pyx_n_s_VariableNameShadowException);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_VariableNameShadowException);
  __Pyx_INCREF(__pyx_n_s_ReservedFunctionShadowException);
  __Pyx_GIVEREF(__pyx_n_s_ReservedFunctionShadowException);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_ReservedFunctionShadowException);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_exceptions, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BadVariableException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BadVariableException, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NameShadowException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NameShadowException, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_VariableNameShadowException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VariableNameShadowException, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ReservedFunctionShadowException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ReservedFunctionShadowException, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":83
 *     self._string_variables._csymtableptr = NULL
 * 
 *   def __init__(self, variables, constants = {}, add_constants = False, functions = {}, string_variables = {}):             # <<<<<<<<<<<<<<
 *     """Instantiate Symbol_Table defining variables and constants for Expression class.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_ = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__2 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__3 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cexprtk/_symbol_table.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6exprtk_LabelStringPair(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cexprtk._symbol_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cexprtk._symbol_table");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
